{
    "source": "5LeZflr8Zfs",
    "youtubelink": "https://www.youtube.com/watch?v=5LeZflr8Zfs",
    "t_english": "- [Instructor] You've probably seen somewhere the definition of computer science as the study of computers, and that probably wasn't particularly helpful because what does it mean to study a computer? To get to a better definition, it'll be helpful for us to answer a few questions first. What is a program? What does a programmer do? And what is the difference between computer science and computer programming? Let's start our exploration with a little history lesson. When humans first roamed the Earth, they spoke only natural languages. Natural languages are what you would typically think of as a language like English, Korean, Arabic. Then computers came into being, and computers only spoke machine language or binary, which is just a series of ones and zeros, like 100011010111. This meant that humans and computers couldn't communicate. Early programmers or the first humans to make contact with computers learned how to speak binary. Now, I don't know about you, but I'm not a native binary speaker, and if you gave me a page of ones and zeros, I could not tell you what that means. Early programmers thought the same thing, they thought, well, what if we invented a language that was somewhere in the middle? It would be closer to English, so it would be easier for us to understand at a glance, but it would still be close enough to binary that we could teach the computers to understand it too. This new language they invented was called assembly language. Let's put it over here kind of still to the right of our spectrum 'cause it's still pretty close to binary. Here's an example of a program written in assembly language. You can see we're getting a little bit closer, there's some letters in here, like maybe mov means move, but it's still pretty hard to understand, it's not what we would call human-readable. Humans continue this process, inventing new languages that were closer and closer to English, making them easier to understand and making programming more accessible to more people. As a quick aside, I only say English here because historically, programming languages have been very English-centric. In theory, the left side of our spectrum could be any natural language. That's pretty much all there is to it, programming languages are just languages that somebody made up one day and taught computers how to understand. This probably leads you to the question, how do you teach a computer a new language? The process is pretty simple, actually. You write a program in a language the computer already understands that translates from your new language to that known language. You can think of these programs like interpreters. In fact, these programs are called interpreters or compilers, depending on the programming language. For example, there's a compiler that translates from assembly code to binary code, and there's a compiler that translates from C code to assembly code, which we know can then be translated to binary code for the computer to understand. Okay, so now that we know what a programming language is, what is a program and what is the art or the process of programming? I like to think of a program as a set of instructions written in a programming language for a computer to execute. Now, that kind of sounds like a process, and that's what programming is, it's a process. The first step is more like creative problem-solving, it's figuring out, well, what are these instructions for? What problem am I trying to solve? What specific requirements does it have? What exactly do I want to happen? Then that second step is taking all those ideas in your head and translating them into something that the computer can understand, translating them into instructions written in a programming language. Then that third step is executing those instructions, so taking what you wrote, handing it off to the computer, and saying, \"Hey, follow these instructions and tell me what result you got.\" As you can imagine, this doesn't always work out the first time around. The computer doesn't always do what you expect it to, so programming is a cycle. You iterate on the instructions and on the requirements until you get the result that you want. Let's talk about making a cake for a second. First, you need to decide what your requirements are, do you want a chocolate cake, a carrot cake, should it have cream cheese frosting, should it have sprinkles on top? Then you need to develop a recipe. You need to write a set of instructions for someone else to follow that will result in the cake that you're envisioning in your head. Then you hand off your recipe to a friend and you ask them to follow it and you see what they do. Maybe they come back and the cake is slightly burnt, or the little frosting swirly is going clockwise instead of counterclockwise like he wanted. So you go in and you iterate and you look and see, well, maybe my instructions weren't quite clear here, or maybe I didn't actually specify which way I wanted the swirlies to go, or maybe my requirements changed and I actually want cupcakes now. This is basically what programming is, except for instead of a recipe, it's a program, and instead of your friend, it's a computer, and at the end, you usually don't get cake. Okay, we've answered the first two questions, what is a program and what does a programmer do? So now let's answer the big question. What is computer science? Computer science is just the more theoretical side of all this, whereas computer programming is the more applied side. Computer scientists study questions like, how can I prove that a program will terminate, or how can I design programs that are maximally efficient, or how can I build a better programming language? The computer science umbrella also covers a lot of disciplines that we can apply programming to, like artificial intelligence or computer security. So while they're not the same thing, at an introductory level, a lot of computer science is just learning how to program because you need to learn to walk before you can run. You need to do before you can theorize. So let's do.\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n",
    "t_urdu": "- [انسٹرکٹر] آپ نے شاید\nکہیں کمپیوٹر سائنس کی تعریف\nکمپیوٹر کے مطالعہ کے طور پر دیکھی ہوگی، اور یہ شاید\nخاص طور پر مددگار نہیں تھی کیونکہ\nکمپیوٹر کا مطالعہ کرنے کا کیا مطلب ہے؟ بہتر تعریف حاصل کرنے کے لیے،\n پہلے چند سوالوں کے جواب دینا ہمارے لیے مددگار ثابت ہوگا۔ ایک پروگرام کیا ہے؟ ایک پروگرامر کیا کرتا ہے؟ اور\nکمپیوٹر سائنس اور کمپیوٹر پروگرامنگ میں کیا فرق ہے؟ آئیے\nتاریخ کے ایک چھوٹے سے سبق کے ساتھ اپنی کھوج کا آغاز کرتے ہیں۔ جب انسان پہلی بار زمین پر گھومتے تھے تو وہ صرف قدرتی زبانیں بولتے تھے۔ قدرتی زبانیں وہ ہیں جن کے بارے میں\nآپ عام طور پر \nانگریزی، کورین، عربی جیسی زبان کے طور پر سوچتے ہیں۔ پھر کمپیوٹر وجود میں آئے، اور کمپیوٹر صرف\nمشینی زبان یا بائنری بولتے تھے، جو کہ صرف ایک اور صفر کی ایک سیریز ہے،\nجیسے 100011010111۔ اس کا مطلب یہ تھا کہ انسان اور\nکمپیوٹر آپس میں بات چیت نہیں کر سکتے۔ ابتدائی پروگرامرز یا کمپیوٹر سے\nرابطہ کرنے والے پہلے انسانوں نے \nبائنری بولنا سیکھا۔ اب، میں آپ کے بارے میں نہیں جانتا، لیکن میں مقامی بائنری اسپیکر نہیں ہوں، اور اگر آپ مجھے ایک\nاور صفر کا صفحہ دیتے ہیں، تو میں آپ کو نہیں بتا سکتا کہ اس کا کیا مطلب ہے۔ ابتدائی پروگرامرز بھی\nیہی سوچتے تھے، انہوں نے سوچا، ٹھیک ہے، اگر ہم کوئی ایسی زبان ایجاد کر لیں جو کہیں درمیان میں ہو؟ یہ انگریزی کے قریب ہوگا،\nاس لیے ہمارے لیے ایک نظر میں سمجھنا آسان ہوگا، لیکن یہ پھر بھی\nبائنری کے اتنا قریب ہوگا کہ ہم\nکمپیوٹر کو بھی اسے سمجھنا سکھا سکیں گے۔  ان کی ایجاد کردہ اس نئی زبان کو اسمبلی زبان کہا جاتا ہے۔ آئیے اسے یہاں\n اپنے اسپیکٹرم کے دائیں طرف رکھیں کیونکہ یہ\nاب بھی بائنری کے کافی قریب ہے۔ یہاں\nاسمبلی زبان میں لکھے گئے پروگرام کی ایک مثال ہے۔ آپ دیکھ سکتے ہیں کہ ہم\nتھوڑا قریب آ رہے ہیں، یہاں کچھ حروف ہیں،\nجیسے شاید mov کا مطلب ہے حرکت، لیکن یہ سمجھنا ابھی بھی بہت مشکل ہے، یہ وہ نہیں ہے جسے ہم\nانسانی پڑھنے کے قابل کہیں گے۔ انسان اس عمل کو جاری رکھتے ہوئے\nنئی زبانیں ایجاد کرتے ہیں جو انگریزی سے قریب تر تھیں، انہیں سمجھنے میں آسان اور پروگرامنگ کو زیادہ سے\nزیادہ لوگوں تک قابل رسائی بناتا ہے۔  ایک طرف کے طور پر، میں یہاں صرف انگریزی کہتا ہوں کیونکہ تاریخی طور پر،\nپروگرامنگ زبانیں بہت انگریزی مرکوز رہی ہیں۔ نظریہ میں، ہمارے سپیکٹرم کا بائیں جانب کوئی بھی قدرتی زبان ہو سکتی ہے۔  اس میں بس اتنا ہی ہے، \nپروگرامنگ زبانیں صرف ایسی زبانیں ہیں جنہیں\nکسی نے ایک دن بنایا اور کمپیوٹر کو سمجھنا سکھایا۔ یہ شاید آپ کو اس سوال کی طرف لے جاتا ہے کہ آپ\nکمپیوٹر کو نئی زبان کیسے سکھاتے ہیں؟ عمل بہت آسان ہے، اصل میں. آپ ایک ایسی زبان میں پروگرام لکھتے ہیں جسے کمپیوٹر پہلے سے\nسمجھتا ہے جو آپ کی نئی زبان سے\nاس معروف زبان میں ترجمہ کرتا ہے۔ آپ ان\nپروگراموں کو ترجمانوں کی طرح سوچ سکتے ہیں۔ درحقیقت ان پروگراموں کو پروگرامنگ لینگویج کے لحاظ سے\nانٹرپریٹر یا کمپائلر کہا جاتا ہے۔ \n مثال کے طور پر، ایک\nکمپائلر ہے جو اسمبلی کوڈ سے بائنری کوڈ میں ترجمہ کرتا ہے، اور ایک کمپائلر ہے\nجو C کوڈ سے اسمبلی کوڈ میں ترجمہ کرتا ہے، جسے ہم\nجانتے ہیں کہ پھر کمپیوٹر کو سمجھنے کے لیے بائنری کوڈ میں ترجمہ کیا جا سکتا ہے۔\n ٹھیک ہے، تو اب جب کہ ہم جانتے ہیں کہ\nپروگرامنگ لینگویج کیا ہے، پروگرام کیا ہے اور پروگرامنگ کا فن یا عمل کیا ہے؟ میں کسی پروگرام کے بارے میں سوچنا چاہتا ہوں کہ \n کمپیوٹر کے لیے پروگرامنگ لینگویج میں لکھی گئی ہدایات کے ایک سیٹ کے طور پر اس پر عمل کیا جائے۔ اب، اس قسم کی آواز ایک عمل کی طرح ہے، اور یہی پروگرامنگ\nہے، یہ ایک عمل ہے۔ پہلا مرحلہ\nتخلیقی مسئلہ حل کرنے کی طرح ہے، اس کا پتہ لگانا، ٹھیک ہے،\nیہ ہدایات کس کے لیے ہیں؟ میں کون سا مسئلہ حل کرنے کی کوشش کر رہا ہوں؟  اس کے کیا مخصوص تقاضے ہیں؟ میں بالکل کیا ہونا چاہتا ہوں؟ پھر وہ دوسرا مرحلہ\nان تمام خیالات کو آپ کے دماغ میں لے جانا اور انہیں کسی ایسی چیز میں ترجمہ کرنا ہے جسے کمپیوٹر\nسمجھ سکتا ہے، انہیں پروگرامنگ زبان میں لکھی گئی ہدایات میں ترجمہ کرنا ہے۔\n پھر وہ تیسرا مرحلہ\nان ہدایات پر عمل درآمد کر رہا ہے، لہذا جو کچھ آپ نے لکھا ہے\nاسے لے کر کمپیوٹر کو دے دیں، اور کہہ رہے ہیں، \"ارے، ان ہدایات پر عمل کریں\n اور مجھے بتائیں کہ آپ کو کیا نتیجہ ملا ہے۔\" جیسا کہ آپ تصور کر سکتے ہیں، یہ\nہمیشہ پہلی بار کام نہیں کرتا ہے۔ کمپیوٹر ہمیشہ وہ نہیں\nکرتا جس کی آپ توقع کرتے ہیں، لہذا پروگرامنگ ایک سائیکل ہے۔ آپ ہدایات اور ضروریات پر اعادہ کرتے ہیں\n جب تک کہ آپ کو مطلوبہ نتیجہ نہ مل جائے۔ آئیے\nایک سیکنڈ کے لیے کیک بنانے کی بات کرتے ہیں۔ سب سے پہلے، آپ کو یہ فیصلہ کرنا ہوگا کہ\nآپ کی ضروریات کیا ہیں، کیا آپ چاکلیٹ\nکیک چاہتے ہیں، گاجر کا کیک، کیا اس میں کریم پنیر کی فراسٹنگ ہونی چاہیے، کیا اس کے اوپر چھڑکاؤ ہونا چاہیے؟ پھر آپ کو ایک ہدایت تیار کرنے کی ضرورت ہے. آپ کو کسی اور کی پیروی کرنے کے لیے ہدایات کا ایک سیٹ لکھنا ہوگا\n جس کے نتیجے میں وہ کیک آئے گا جس کا آپ اپنے ذہن میں تصور کر رہے ہیں۔ پھر آپ اپنی ترکیب کسی دوست کے حوالے کرتے ہیں اور آپ ان سے اس پر عمل کرنے کو کہتے ہیں\nاور آپ دیکھتے ہیں کہ وہ کیا کرتے ہیں۔ ہوسکتا ہے کہ وہ واپس آجائیں اور\nکیک ہلکا سا جل گیا ہو، یا چھوٹا سا فراسٹنگ swirly گھڑی کی سمت کی\nبجائے گھڑی کی سمت میں جا رہا ہے جیسا کہ وہ چاہتا تھا۔ تو آپ اندر جاتے ہیں اور آپ اعادہ کرتے ہیں\nاور آپ دیکھتے ہیں اور دیکھتے ہیں، ٹھیک ہے، شاید میری ہدایات\nیہاں بالکل واضح نہیں تھیں، یا شاید میں نے حقیقت میں یہ\nواضح نہیں کیا تھا کہ میں کس راستے پر جانا چاہتا ہوں، یا ہوسکتا ہے کہ\nمیری ضروریات بدل جائیں اور میں حقیقت میں  ابھی کپ کیک چاہتے ہیں؟ یہ بنیادی طور پر پروگرامنگ ہے، سوائے ایک\nنسخہ کے، یہ ایک پروگرام ہے، اور آپ کے\nدوست کے بجائے، یہ ایک کمپیوٹر ہے، اور آخر میں، آپ کو\nعام طور پر کیک نہیں ملتا۔ ٹھیک ہے، ہم نے پہلے دو سوالوں کا جواب دے دیا ہے،\n پروگرام کیا ہے اور\nپروگرامر کیا کرتا ہے؟ تو اب اس بڑے سوال کا جواب دیتے ہیں۔ کمپیوٹر سائنس کیا ہے؟ کمپیوٹر سائنس اس سب کا صرف\nزیادہ نظریاتی پہلو ہے، جبکہ کمپیوٹر پروگرامنگ زیادہ لاگو پہلو ہے۔ کمپیوٹر سائنس دان سوالات کا مطالعہ کرتے ہیں جیسے، میں یہ کیسے ثابت کر سکتا ہوں کہ کوئی\nپروگرام ختم ہو جائے گا، یا میں ایسے پروگرام کیسے ڈیزائن کر سکتا ہوں\nجو زیادہ سے زیادہ موثر ہوں، یا میں ایک بہتر\nپروگرامنگ زبان کیسے بنا سکتا ہوں؟ کمپیوٹر سائنس کی\nچھتری بھی بہت سارے مضامین کا احاطہ کرتی ہے جن\nپر ہم پروگرامنگ کا اطلاق کر سکتے ہیں، جیسے کہ مصنوعی ذہانت\nیا کمپیوٹر سیکیورٹی۔ لہذا جب کہ وہ ایک جیسی چیز نہیں ہیں، ایک تعارفی سطح پر،\nکمپیوٹر سائنس کا بہت سا حصہ صرف پروگرام کرنے کا طریقہ سیکھ رہا ہے کیونکہ آپ کو\nچلانے سے پہلے چلنا سیکھنا ہوگا۔  نظریہ بنانے سے پہلے آپ کو کرنا ہوگا۔\nتو آئیے کرتے ہیں۔",
    "t_spanish": "- [Instructor] Probablemente hayas\nvisto en alguna parte la definición de informática como\nel estudio de las computadoras, y probablemente eso no te haya resultado\nparticularmente útil porque ¿qué\nsignifica estudiar una computadora? Para llegar a una mejor definición,\nnos será útil responder algunas preguntas primero.  ¿ Qué es un programa?  ¿ Qué hace un programador?  ¿ Y cuál es la diferencia\nentre informática y programación informática? Comencemos nuestra exploración\ncon una pequeña lección de historia. Cuando los humanos vagaron por la Tierra por primera vez, sólo hablaban lenguajes naturales.  Los lenguajes naturales son lo que\nnormalmente se consideraría un idioma como el\ninglés, el coreano o el árabe. Luego surgieron las computadoras, y las computadoras solo hablaban\nlenguaje de máquina o binario, que es solo una serie de unos\ny ceros, como 100011010111. Esto significaba que los humanos y las\ncomputadoras no podían comunicarse.  Los primeros programadores o los\nprimeros humanos en entrar en contacto con las computadoras aprendieron a\nhablar binario. Ahora, no sé ustedes, pero yo no soy un hablante binario nativo, y si me dieran una\npágina de unos y ceros, no podría decirles lo que eso significa.  Los primeros programadores pensaron\nlo mismo, pensaron, bueno, ¿y si inventáramos un lenguaje que estuviera en algún punto intermedio? Estaría más cerca del\ninglés, por lo que sería más fácil para nosotros entenderlo de un vistazo, pero aún así estaría lo\nsuficientemente cerca del binario como para que pudiéramos enseñar a las\ncomputadoras a entenderlo también. Este nuevo lenguaje que inventaron se llamó lenguaje ensamblador. Pongámoslo aquí\ntodavía a la derecha de nuestro espectro porque\ntodavía está bastante cerca de lo binario. A continuación se muestra un ejemplo de un programa\nescrito en lenguaje ensamblador. Pueden ver que nos estamos\nacercando un poco más, hay algunas letras aquí,\ncomo tal vez mov significa mover, pero todavía es bastante difícil de entender, no es lo que\nllamaríamos legible por humanos. Los humanos continúan este proceso,\ninventando nuevos lenguajes cada vez más cercanos al inglés, haciéndolos más fáciles de entender y haciendo que la programación sea más\naccesible para más personas. Como comentario breve, aquí solo digo inglés porque históricamente, los\nlenguajes de programación han estado muy centrados en el inglés. En teoría, el lado izquierdo de nuestro espectro podría ser cualquier lenguaje natural. Eso es prácticamente todo lo que hay que\nhacer, los lenguajes de programación son simplemente lenguajes que\nalguien inventó un día y enseñó a las computadoras a entender. Esto probablemente te lleve a la pregunta: ¿ cómo se le enseña\nun nuevo idioma a una computadora? En realidad, el proceso es bastante sencillo. Usted escribe un programa en un idioma que la computadora ya\ncomprende y que se traduce de su nuevo idioma\na ese idioma conocido. Puedes pensar en estos\nprogramas como intérpretes. De hecho, estos programas\nse denominan intérpretes o compiladores, según\nel lenguaje de programación. Por ejemplo, hay un\ncompilador que traduce de código ensamblador a código binario, y hay un compilador\nque traduce de código C a código ensamblador, que\nsabemos que luego puede traducirse a código binario para que la\ncomputadora lo entienda. Bien, ahora que sabemos qué\nes un lenguaje de programación, ¿ qué es un programa y cuál es el arte o el proceso de programación? Me gusta pensar en un programa como un conjunto de instrucciones escritas\nen un lenguaje de programación para que las ejecute una computadora. Ahora, eso suena como un proceso, y eso\nes la programación, es un proceso. El primer paso es más bien una\nresolución creativa de problemas: es descubrir, bueno, ¿\npara qué sirven estas instrucciones?  ¿ Qué problema estoy tratando de resolver?  ¿ Qué requisitos específicos tiene?  ¿ Qué quiero que pase exactamente? Luego, el segundo paso es tomar\ntodas esas ideas en tu cabeza y traducirlas a algo que la computadora pueda\nentender, traduciéndolas en instrucciones escritas\nen un lenguaje de programación. Luego, el tercer paso es\nejecutar esas instrucciones, es decir, tomar lo que escribiste,\nentregárselo a la computadora y decir: \"Oye, sigue\nestas instrucciones y dime qué resultado obtuviste\". Como puedes imaginar, esto\nno siempre funciona la primera vez. La computadora no siempre\nhace lo que usted espera, por lo que la programación es un ciclo.  Se repiten las instrucciones\ny los requisitos hasta obtener el resultado que desea. Hablemos de hacer\nun pastel por un segundo. Primero, debe decidir\ncuáles son sus requisitos: ¿ quiere un\npastel de chocolate, un pastel de zanahoria, debe tener glaseado de queso crema o debe tener chispas encima? Entonces necesitas desarrollar una receta. Debes escribir una serie de\ninstrucciones para que las siga otra persona y que darán como resultado el pastel que estás imaginando en tu cabeza. Luego le entregas tu receta a un amigo , le pides que la siga\ny ves lo que hace. Tal vez regresan y\nel pastel está ligeramente quemado, o el pequeño glaseado\ngira en el sentido de las agujas del reloj en lugar de en el sentido contrario como él quería. Entonces entras, iteras\ny miras y ves, bueno, tal vez mis instrucciones\nno fueron muy claras aquí, o tal vez no\nespecifiqué en qué dirección quería que fueran los remolinos, o tal vez\nmis requisitos cambiaron y en realidad  Quiero pastelitos ahora. Esto es básicamente lo que es la programación, excepto que en lugar de una\nreceta, es un programa, y ​​en lugar de tu\namigo, es una computadora, y al final,\ngeneralmente no obtienes pastel. Bien, hemos respondido\nlas dos primeras preguntas, ¿ qué es un programa y\nqué hace un programador? Ahora respondamos la gran pregunta.  ¿ Qué es la informática?  La informática es sólo\nel lado más teórico de todo esto, mientras que la programación informática es el lado más aplicado.  Los informáticos estudian preguntas como, ¿ cómo puedo demostrar que un\nprograma terminará, cómo puedo diseñar programas\nque sean máximamente eficientes o cómo puedo construir un mejor\nlenguaje de programación? El\námbito de la informática también cubre muchas disciplinas a las que\npodemos aplicar la programación, como la inteligencia artificial\no la seguridad informática. Entonces, si bien no son lo mismo, en un nivel introductorio,\ngran parte de la informática consiste simplemente en aprender a programar porque es necesario aprender\na caminar antes de poder correr. Necesitas hacerlo antes de\npoder teorizar.  Así que hagámoslo.",
    "t_arabic": "- [المدرس] ربما تكون قد\nرأيت في مكان ما تعريف علوم الكمبيوتر على أنه\nدراسة أجهزة الكمبيوتر، وربما لم يكن ذلك\nمفيدًا بشكل خاص لأنه ماذا\nتعني دراسة الكمبيوتر؟ للوصول إلى تعريف أفضل،\nسيكون من المفيد لنا الإجابة على بعض الأسئلة أولاً. ما هو البرنامج؟ ماذا يفعل المبرمج؟ وما الفرق\nبين علوم الكمبيوتر وبرمجة الكمبيوتر؟ لنبدأ استكشافنا\nبدرس صغير في التاريخ. عندما جاب البشر الأرض لأول مرة، كانوا يتحدثون اللغات الطبيعية فقط. اللغات الطبيعية هي ما\nتعتقد عادة أنها لغة مثل\nالإنجليزية والكورية والعربية. ثم ظهرت أجهزة الكمبيوتر، وكانت أجهزة الكمبيوتر تتحدث فقط\nلغة الآلة أو الثنائية، وهي مجرد سلسلة من الآحاد\nوالأصفار، مثل 100011010111. وهذا يعني أن البشر وأجهزة\nالكمبيوتر لم يتمكنوا من التواصل.  تعلم المبرمجون الأوائل أو\nالبشر الأوائل الذين اتصلوا بأجهزة الكمبيوتر\nكيفية التحدث بالثنائي. الآن، لا أعرف عنك، لكنني لست متحدثًا أصليًا للثنائيات، وإذا أعطيتني\nصفحة من الآحاد والأصفار، فلن أستطيع أن أخبرك بما يعنيه ذلك.  لقد اعتقد المبرمجون الأوائل\nنفس الشيء، لقد اعتقدوا، حسنًا، ماذا لو اخترعنا لغة في مكان ما في المنتصف؟ سيكون أقرب إلى\nاللغة الإنجليزية، لذلك سيكون من الأسهل بالنسبة لنا أن نفهمه بنظرة واحدة، لكنه سيظل\nقريبًا بدرجة كافية من اللغة الثنائية حتى نتمكن من تعليم\nأجهزة الكمبيوتر كيفية فهمها أيضًا. هذه اللغة الجديدة التي اخترعواها كانت تسمى لغة التجميع. دعونا نضعها هنا على\nيمين الطيف لأنه لا يزال\nقريبًا جدًا من النظام الثنائي. فيما يلي مثال لبرنامج\nمكتوب بلغة التجميع. يمكنك أن ترى أننا\nنقترب قليلاً، هناك بعض الحروف هنا،\nمثل ربما mov تعني تحرك، ولكن لا يزال من الصعب جدًا فهمها، فهي ليست ما يمكن أن\nنسميه قابلاً للقراءة من قبل الإنسان. يواصل البشر هذه العملية، حيث\nيخترعون لغات جديدة أقرب فأقرب إلى اللغة الإنجليزية، مما يجعلها أسهل للفهم وتجعل البرمجة في\nمتناول المزيد من الناس. جانبًا سريعًا، أنا أقول الإنجليزية فقط هنا لأنه تاريخيًا، كانت\nلغات البرمجة تتمحور حول اللغة الإنجليزية. من الناحية النظرية، يمكن أن يكون الجانب الأيسر من طيفنا أي لغة طبيعية. هذا كل ما في الأمر تقريبًا،\nلغات البرمجة هي مجرد لغات\nابتكرها شخص ما ذات يوم وقام بتعليم أجهزة الكمبيوتر كيفية فهمها. ربما يقودك هذا إلى السؤال، كيف يمكنك تعليم\nالكمبيوتر لغة جديدة؟ العملية بسيطة جدًا في الواقع. أنت تكتب برنامجًا بلغة يفهمها الكمبيوتر بالفعل\nوالتي تترجم من لغتك الجديدة\nإلى تلك اللغة المعروفة. يمكنك التفكير في هذه\nالبرامج مثل المترجمين الفوريين. في الواقع، تسمى هذه البرامج\nبالمترجمين الفوريين أو المترجمين، اعتمادًا على\nلغة البرمجة. على سبيل المثال، هناك\nمترجم يترجم من كود التجميع إلى كود ثنائي، وهناك مترجم\nيترجم من كود C إلى كود التجميع، والذي\nنعلم أنه يمكن بعد ذلك ترجمته إلى كود ثنائي لكي\nيفهمه الكمبيوتر. حسنًا، الآن بعد أن عرفنا ما هي\nلغة البرمجة، ما هو البرنامج وما هو فن أو عملية البرمجة؟ أحب أن أفكر في البرنامج باعتباره مجموعة من التعليمات المكتوبة\nبلغة برمجة ليقوم الكمبيوتر بتنفيذها. الآن، هذا النوع يبدو وكأنه عملية، وهذه هي البرمجة\n، إنها عملية. الخطوة الأولى هي أشبه بالحل\nالإبداعي للمشكلات، فهي معرفة، حسنًا، ما الغرض من\nهذه التعليمات؟ ما المشكلة التي أحاول حلها؟ ما هي المتطلبات المحددة لديها؟ ما الذي أريد أن يحدث بالضبط؟ ثم الخطوة الثانية هي أخذ\nكل تلك الأفكار في رأسك وترجمتها إلى شيء يمكن للكمبيوتر\nفهمه، وترجمتها إلى تعليمات مكتوبة\nبلغة برمجة. ثم الخطوة الثالثة هي\nتنفيذ تلك التعليمات، فأخذ ما كتبته،\nوتسليمه للكمبيوتر، والقول، \"مرحبًا، اتبع\nهذه التعليمات وأخبرني بالنتيجة التي حصلت عليها.\" كما يمكنك أن تتخيل، هذا\nلا ينجح دائمًا في المرة الأولى. لا يقوم الكمبيوتر دائمًا\nبما تتوقعه منه، لذا فإن البرمجة عبارة عن دورة. يمكنك تكرار التعليمات\nوالمتطلبات حتى تحصل على النتيجة التي تريدها. دعونا نتحدث عن صنع\nكعكة لثانية واحدة. أولاً، عليك أن تقرر\nما هي متطلباتك، هل تريد\nكعكة الشوكولاتة، أو كعكة الجزر، أو هل يجب أن تحتوي على كريمة الجبن، أو هل يجب أن تحتوي على رشات في الأعلى؟ ثم تحتاج إلى تطوير وصفة. تحتاج إلى كتابة مجموعة من\nالتعليمات ليتبعها شخص آخر والتي ستؤدي إلى الكعكة التي تتخيلها في رأسك. ثم تقوم بتسليم وصفتك لصديق وتطلب منه أن يتبعها\nوترى ماذا سيفعلون. ربما يعودون\nوالكعكة محترقة قليلاً، أو أن طبقة الزينة الصغيرة\nتتحرك في اتجاه عقارب الساعة بدلاً من عكس اتجاه عقارب الساعة كما أراد. لذلك تدخل وتكرر\nوتنظر وترى، حسنًا، ربما\nلم تكن تعليماتي واضحة تمامًا هنا، أو ربما لم\nأحدد في الواقع الاتجاه الذي أريد أن تسلكه الدوامات، أو ربما\nتغيرت متطلباتي وأنا بالفعل  تريد الكعك الآن. هذا هو أساسًا ما هي البرمجة، باستثناء أنه بدلاً من\nالوصفة، فهو برنامج، وبدلاً من\nصديقك، فهو جهاز كمبيوتر، وفي النهاية،\nعادةً لا تحصل على الكعكة. حسنًا، لقد أجبنا على\nالسؤالين الأولين، ما هو البرنامج وماذا\nيفعل المبرمج؟ والآن دعونا نجيب على السؤال الكبير. ما هو علم الحاسوب؟ علوم الكمبيوتر هي\nالجانب الأكثر نظرية من كل هذا، في حين أن برمجة الكمبيوتر هي الجانب الأكثر تطبيقًا. يدرس علماء الكمبيوتر أسئلة مثل، كيف يمكنني إثبات أن\nالبرنامج سينتهي، أو كيف يمكنني تصميم برامج\nذات أقصى قدر من الكفاءة، أو كيف يمكنني بناء\nلغة برمجة أفضل؟ \nوتغطي مظلة علوم الكمبيوتر أيضًا الكثير من التخصصات التي\nيمكننا تطبيق البرمجة عليها، مثل الذكاء الاصطناعي\nأو أمن الكمبيوتر. لذا، على الرغم من أنهما ليسا نفس الشيء، إلا أنه على المستوى التمهيدي، فإن\nالكثير من علوم الكمبيوتر هي مجرد تعلم كيفية البرمجة لأنك تحتاج إلى تعلم\nالمشي قبل أن تتمكن من الركض.  ما عليك القيام به قبل أن\nتتمكن من التنظير.  لذلك دعونا نفعل.",
    "t_italian": "- [Istruttore] Probabilmente hai\nvisto da qualche parte la definizione di informatica come\nstudio dei computer, e probabilmente non è stata\nparticolarmente utile perché cosa\nsignifica studiare un computer? Per arrivare ad una definizione migliore,\nsarà utile rispondere prima ad alcune domande. Cos'è un programma? Cosa fa un programmatore? E qual è la differenza\ntra informatica e programmazione informatica? Iniziamo la nostra esplorazione\ncon una piccola lezione di storia. Quando gli esseri umani vagarono per la prima volta sulla Terra, parlavano solo lingue naturali.  Le lingue naturali sono ciò che\nnormalmente considereresti una lingua come l'\ninglese, il coreano, l'arabo. Poi sono nati i computer, e i computer parlavano solo il\nlinguaggio macchina o binario, che è semplicemente una serie di uno\ne zero, come 100011010111. Ciò significava che gli esseri umani e i\ncomputer non potevano comunicare.  I primi programmatori o i\nprimi esseri umani a entrare in contatto con i computer hanno imparato a\nparlare in binario. Ora, non so voi, ma io non sono un madrelingua binario e se mi deste una\npagina di uno e zero, non saprei dirvi cosa significa.  I primi programmatori pensavano\nla stessa cosa, pensavano, beh, e se avessimo inventato un linguaggio che fosse da qualche parte nel mezzo? Sarebbe più vicino\nall'inglese, quindi sarebbe più facile per noi capirlo a colpo d'occhio, ma sarebbe comunque\nabbastanza vicino al binario da poter insegnare\nanche ai computer a capirlo. Questo nuovo linguaggio che inventarono fu chiamato linguaggio assembly. Mettiamolo qui\nancora a destra del nostro spettro perché è\nancora abbastanza vicino al binario. Ecco un esempio di un programma\nscritto in linguaggio assembly. Puoi vedere che ci stiamo\navvicinando un po', ci sono alcune lettere qui,\ncome forse mov significa muoversi, ma è ancora piuttosto difficile da capire, non è ciò che\nchiameremmo leggibile dall'uomo. Gli esseri umani continuano questo processo,\ninventando nuovi linguaggi sempre più vicini all’inglese, rendendoli più facili da comprendere e rendendo la programmazione più\naccessibile a più persone. Per inciso, qui dico solo inglese perché storicamente i\nlinguaggi di programmazione sono stati molto incentrati sull'inglese. In teoria, il lato sinistro del nostro spettro potrebbe essere qualsiasi linguaggio naturale. Questo è più o meno tutto quello che c'è da\nfare, i linguaggi di programmazione sono semplicemente linguaggi che\nqualcuno ha inventato un giorno e ha insegnato ai computer come comprenderli. Questo probabilmente ti porta alla domanda: come si insegna a un\ncomputer una nuova lingua? Il processo è piuttosto semplice, in realtà. Scrivi un programma in una lingua che il computer già\ncomprende e che traduce dalla tua nuova lingua\na quella conosciuta. Puoi pensare a questi\nprogrammi come a degli interpreti. Questi programmi infatti\nvengono chiamati interpreti o compilatori, a seconda\ndel linguaggio di programmazione. Ad esempio, c'è un\ncompilatore che traduce dal codice assembly al codice binario, e c'è un compilatore\nche traduce dal codice C al codice assembly, che\nsappiamo può poi essere tradotto in codice binario affinché il\ncomputer possa comprenderlo. Ok, ora che sappiamo cos'è\nun linguaggio di programmazione, cos'è un programma e qual è l'arte o il processo di programmazione? Mi piace pensare a un programma come a un insieme di istruzioni scritte\nin un linguaggio di programmazione affinché un computer possa eseguirle. Ora, questo suona come un processo, ed ecco cos'è la programmazione\n, è un processo. Il primo passo è più simile alla\nrisoluzione creativa dei problemi, è capire, beh, a cosa servono\nqueste istruzioni? Quale problema sto cercando di risolvere? Quali requisiti specifici ha? Cosa voglio che accada esattamente? Quindi il secondo passo è prendere\ntutte quelle idee nella tua testa e tradurle in qualcosa che il computer possa\ncapire, traducendole in istruzioni scritte\nin un linguaggio di programmazione. Quindi il terzo passaggio è\neseguire quelle istruzioni, quindi prendere ciò che hai scritto,\npassarlo al computer e dire: \"Ehi, segui\nqueste istruzioni e dimmi che risultato hai ottenuto\". Come puoi immaginare,\nnon sempre funziona la prima volta. Il computer non sempre\nfa quello che ti aspetti, quindi la programmazione è un ciclo. Ripeti le istruzioni\ne i requisiti finché non ottieni il risultato desiderato. Parliamo\nun attimo di come preparare una torta. Per prima cosa, devi decidere\nquali sono le tue esigenze, vuoi una torta al cioccolato\n, una torta alle carote, dovrebbe avere glassa al formaggio cremoso, dovrebbe avere dei confettini sopra? Quindi è necessario sviluppare una ricetta. Devi scrivere una serie di\nistruzioni che qualcun altro dovrà seguire per ottenere la torta che stai immaginando nella tua testa. Quindi consegni la tua ricetta a un amico e gli chiedi di seguirla\ne vedi cosa fanno. Magari ritornano e\nla torta è leggermente bruciata, oppure la piccola glassa\ngira in senso orario anziché antiorario come voleva. Quindi entri e ripeti\ne guardi e vedi, beh, forse le mie istruzioni\nnon erano del tutto chiare qui, o forse non ho effettivamente\nspecificato in che direzione volevo che andassero i vortici, o forse i\nmiei requisiti sono cambiati e in realtà  voglio i cupcake adesso. Questo è fondamentalmente ciò che è la programmazione, tranne per il fatto che invece di una\nricetta, è un programma, e invece del tuo\namico, è un computer, e alla fine, di\nsolito non ottieni una torta. Ok, abbiamo risposto\nalle prime due domande, cos'è un programma e\ncosa fa un programmatore? Quindi ora rispondiamo alla grande domanda. Cos'è l'informatica?  L’ informatica è solo\nl’aspetto più teorico di tutto questo, mentre la programmazione è l’aspetto più applicato.  Gli informatici studiano domande come: come posso dimostrare che un\nprogramma terminerà, o come posso progettare programmi\nche siano massimamente efficienti, o come posso costruire un\nlinguaggio di programmazione migliore? L’\nombrello dell’informatica copre anche molte discipline a cui\npossiamo applicare la programmazione, come l’intelligenza artificiale\no la sicurezza informatica. Quindi, anche se non sono la stessa cosa, a livello introduttivo,\ngran parte dell'informatica consiste semplicemente nell'imparare a programmare perché è necessario imparare\na camminare prima di poter correre. Devi fare prima di\npoter teorizzare.  Quindi facciamolo."
}