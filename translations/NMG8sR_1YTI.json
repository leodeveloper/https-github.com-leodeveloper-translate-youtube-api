{
    "source": "NMG8sR_1YTI",
    "youtubelink": "https://www.youtube.com/watch?v=NMG8sR_1YTI",
    "t_english": "- [Instructor] Let's design a program with compound Boolean expressions. We're working on an automated content moderation system for our site. We want our system to automatically flag posts that seem questionable so our team can investigate further and decide which ones to take down. We also wanna automatically promote any posts that we think are particularly useful so that they appear at the top of the page. Let's think about what our algorithm for flagging posts might look like. Our moderators have told us that they're especially wary of new accounts. It's not often that users who have been on our site for a while all of a sudden start posting a ton of spam. There are, of course, legitimate new users, and we don't wanna discourage them from using our site by flagging their posts all the time, so we think the best thing to do might be to check for a combination of conditions. We have available the overall sentiment of the post, whether it's positive, neutral, or negative. Here, we're most worried about negative posts. We definitely don't want users bullying each other or promoting violence on our site. All right, now what about our algorithm for promoting useful posts? We wanna make sure not to promote posts that are negative, but we wanna be fair and not just promote posts that talk about how great our site is, so we'll consider both positive and neutral posts. Then we decided we also wanna value consistent users, people who have been on our site for a while and represent trusted voices. We recognize this isn't a perfect algorithm, but we think it might be good enough for what we're trying to do here. Next step, let's translate our content moderation algorithms into code. We start with our two pieces of data, the sentiment of the post and the user's account age in days. Our algorithm for flagging was, if the sentiment is negative and the account is new, let's say new is less than a week old, that means our condition is the sentiment equals equals negative and the account age in days is less than seven. It's an and because we only wanna flag if both conditions are true. We surround our compound condition with an if statement, and then inside the if statement, we wanna print our content moderation decision. That lets our moderators know to take a closer look at this post. Okay, now let's test this on a couple different posts. A negative post created by a new user should get this flag, a negative post created by a longtime user shouldn't, and a positive post created by a new user shouldn't, either. Let's work on our post promotion algorithm next. This algorithm was neutral or positive posts from trusted accounts. Because there's only three possible sentiments, positive, neutral, and negative, this is equivalent to saying sentiment is not equal to negative. For trusted users, let's go with an account age that's greater than or equal to 30 days. That's not the perfect equivalent, but we think it'll provide a good approximation. So we add our if statement, and then inside the if statement, we just wanna signal that the post has been featured, so we indent a print function call inside the if statement. Then let's run through a few test cases to make sure this is working as intended. A negative post by a trusted user, a positive post by a new user, and a neutral post by a trusted user. We have it working, but we wanna refine our algorithm a bit. We are noticing that some not super useful posts are getting featured, like that post we had at the beginning that just said, \"hiiii\". We think we can make a good generalization here that posts that are super short or super long are probably not the most useful, so let's add another condition to our feature case. To do this, we need a new piece of information about each post. We need to know how many words it has. Our team says it should be easy to get this data, so we'll add a new variable, word count. This is about to make our condition super long, so I'm gonna break it up into multiple pieces to make it easier to read. Post lengths that we don't like are less than or equal to three words or greater than 200 words. We use an or here because it's suspicious if either condition is true. We store that intermediate result in a variable, and then we add it on to our feature condition. We use an and here because we want all three of these conditions to be true in order to feature the post. However, we don't wanna feature it if it's a suspicious length. We wanna feature it if it's not a suspicious length, so we use the not operator here. Now let's check our condition with that post that said \"hiiii\". It had a word count of one, a neutral sentiment, and a pretty old account. Great, now that post is no longer being featured. However, I see I'm getting a lint error now where my line is too long. To fix this, I'm gonna break my condition up into multiple variables. Let's say a useful post is not negative and not a suspicious length, and then let's store the result of the account age check in a variable called is trusted user. Then our condition just becomes if is useful post and is trusted user, which is a lot easier to understand at a glance. In fact, it's so readable that it's self-documenting, such that we don't even really need this comment anymore, because it just says the same thing as the variable names. We'll go on and test with a few more cases to make sure everything works, and then we'll make sure to monitor how our algorithm performs on our site so we can keep making adjustments as needed. \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n",
    "t_urdu": "- [انسٹرکٹر] آئیے کمپاؤنڈ بولین ایکسپریشنز کے ساتھ ایک پروگرام ڈیزائن کریں۔ ہم اپنی سائٹ کے لیے ایک خودکار\nمواد کے اعتدال کے نظام پر کام کر رہے ہیں۔ ہم چاہتے ہیں کہ ہمارا سسٹم ان\nپوسٹس کو خودکار طور پر جھنڈا لگائے جو قابل اعتراض لگتی ہیں تاکہ ہماری\nٹیم مزید تفتیش کر سکے اور فیصلہ کر سکے کہ کن کو ہٹانا ہے۔ ہم خود بخود\nکسی بھی پوسٹ کو فروغ دینا چاہتے ہیں جو ہمارے خیال میں خاص طور پر مفید ہیں تاکہ وہ صفحہ کے اوپری حصے میں ظاہر ہوں۔\n آئیے اس بارے میں سوچتے ہیں کہ\nپرچم لگانے والی پوسٹس کے لیے ہمارا الگورتھم کیسا نظر آتا ہے۔ ہمارے ماڈریٹرز نے ہمیں بتایا ہے کہ وہ خاص طور پر\nنئے اکاؤنٹس سے محتاط ہیں۔ ایسا اکثر نہیں ہوتا ہے کہ وہ صارفین\nجو ہماری سائٹ پر تھوڑی دیر سے موجود ہیں اچانک\nایک ٹن سپیم پوسٹ کرنا شروع کر دیتے ہیں۔ بلاشبہ،\nجائز نئے صارفین ہیں، اور ہم\n ان کی پوسٹس کو ہر وقت جھنڈا لگا کر ہماری سائٹ استعمال کرنے سے ان کی حوصلہ شکنی نہیں کرنا چاہتے، اس لیے ہمارے خیال میں سب سے بہتر کام یہ ہو\nسکتا ہے کہ حالات کے امتزاج کی جانچ کی جائے۔ ہمارے پاس\nپوسٹ کا مجموعی جذبہ دستیاب ہے، چاہے وہ مثبت ہو،\nغیر جانبدار ہو یا منفی۔ یہاں، ہم\nمنفی پوسٹس کے بارے میں سب سے زیادہ پریشان ہیں۔ ہم یقینی طور پر نہیں چاہتے کہ\nصارفین ہماری سائٹ پر ایک دوسرے کو دھونس دیں یا تشدد کو فروغ دیں۔ ٹھیک ہے، اب مفید پوسٹس کو فروغ دینے کے لیے ہمارے الگورتھم کا کیا ہوگا؟ ہم اس بات کو یقینی بنانا چاہتے ہیں کہ\nمنفی پوسٹس کو فروغ نہ دیں، لیکن ہم منصفانہ ہونا چاہتے ہیں اور\nنہ صرف ان پوسٹس کو فروغ دینا چاہتے ہیں جو یہ بتاتی ہیں کہ ہماری سائٹ کتنی عظیم ہے، لہذا ہم\nمثبت اور غیر جانبدار دونوں پوسٹوں پر غور کریں گے۔ پھر ہم نے فیصلہ کیا کہ ہم\nمستقل صارفین کی بھی قدر کرنا چاہتے ہیں، وہ لوگ جو\nہماری سائٹ پر کچھ عرصے سے موجود ہیں اور بھروسہ مند آوازوں کی نمائندگی کرتے ہیں۔ ہم تسلیم کرتے ہیں کہ یہ\nایک مکمل الگورتھم نہیں ہے، لیکن ہمارے خیال میں یہ اس کے لیے کافی اچھا ہو سکتا ہے جو ہم یہاں کرنے کی کوشش کر رہے ہیں۔ اگلا مرحلہ، آئیے اپنے\nمواد کے اعتدال کے الگورتھم کو کوڈ میں ترجمہ کریں۔ ہم اپنے ڈیٹا کے دو ٹکڑوں، پوسٹ کے جذبات اور دنوں میں صارف کے اکاؤنٹ کی عمر کے ساتھ شروع کرتے ہیں۔ جھنڈا لگانے کے لیے ہمارا الگورتھم یہ تھا، اگر جذبات منفی ہے\nاور اکاؤنٹ نیا ہے، تو ہم کہتے ہیں کہ نیا ایک ہفتے سے کم پرانا ہے، اس کا مطلب یہ ہے کہ ہماری حالت یہ ہے کہ جذبہ برابر منفی ہے اور اکاؤنٹ کی عمر\nدنوں میں سات سے کم ہے۔ یہ ایک ہے اور کیونکہ ہم صرف اس صورت میں جھنڈا لگانا چاہتے ہیں جب دونوں شرائط درست ہوں۔ ہم اپنی کمپاؤنڈ\nکنڈیشن کو if سٹیٹمنٹ سے گھیر لیتے ہیں، اور پھر if سٹیٹمنٹ کے اندر، ہم اپنے مواد کے اعتدال کے فیصلے کو پرنٹ کرنا چاہتے ہیں۔\n یہ ہمارے ماڈریٹرز کو اس پوسٹ کو قریب سے دیکھنے کی اجازت دیتا ہے۔ ٹھیک ہے، اب آئیے اس کی جانچ\nکچھ مختلف پوسٹس پر کرتے ہیں۔ ایک نئے صارف کی طرف سے بنائی گئی منفی پوسٹ کو\nیہ جھنڈا ملنا چاہیے، ایک دیرینہ صارف کے ذریعے تخلیق کردہ منفی پوسٹ کو\nنہیں ہونا چاہیے، اور ایک نئے صارف کے ذریعے تخلیق کردہ مثبت پوسٹ کو\nبھی نہیں ہونا چاہیے۔ آئیے آگے اپنے پوسٹ پروموشن الگورتھم پر کام کرتے ہیں۔\n یہ الگورتھم قابل اعتماد اکاؤنٹس سے\nغیر جانبدار یا مثبت پوسٹس تھا۔ کیونکہ صرف\nتین ممکنہ جذبات ہیں، مثبت، غیر جانبدار، اور منفی، یہ کہنے کے مترادف ہے کہ جذبات منفی کے برابر نہیں ہیں۔ قابل اعتماد صارفین کے لیے، آئیے\nاکاؤنٹ کی عمر کے ساتھ چلتے ہیں جو 30 دن سے زیادہ یا اس کے برابر ہے۔ یہ کامل مساوی نہیں ہے، لیکن ہمیں لگتا ہے کہ یہ\nایک اچھا تخمینہ فراہم کرے گا۔ تو ہم اپنا if سٹیٹمنٹ شامل کرتے ہیں، اور پھر if سٹیٹمنٹ کے اندر، ہم صرف یہ اشارہ کرنا چاہتے ہیں کہ\nپوسٹ کو نمایاں کیا گیا ہے، لہذا ہم if سٹیٹمنٹ کے اندر ایک پرنٹ فنکشن کال انڈینٹ کرتے ہیں۔\n پھر آئیے اس بات کو یقینی بنانے کے لیے چند ٹیسٹ کیسز کا جائزہ لیں کہ یہ حسب منشا کام کر رہا ہے۔ ایک قابل اعتماد صارف کی طرف سے ایک منفی پوسٹ، ایک نئے صارف کی طرف سے ایک مثبت پوسٹ، اور ایک قابل اعتماد صارف کی طرف سے ایک غیر جانبدار پوسٹ۔ ہمارے پاس یہ کام کر رہا ہے، لیکن ہم\nاپنے الگورتھم کو تھوڑا سا بہتر کرنا چاہتے ہیں۔ ہم دیکھ رہے ہیں کہ کچھ\nانتہائی مفید پوسٹس نمایاں ہو رہی ہیں، جیسا کہ\nہم نے شروع میں کہا تھا، \"hiiii\"۔ ہمارا خیال ہے کہ ہم یہاں ایک اچھی عامی بنا سکتے ہیں\n کہ جو پوسٹس\nانتہائی مختصر یا بہت لمبی ہیں وہ شاید سب سے زیادہ کارآمد نہیں ہیں، تو آئیے\nاپنے فیچر کیس میں ایک اور شرط شامل کریں۔ ایسا کرنے کے لیے، ہمیں\n ہر پوسٹ کے بارے میں معلومات کے ایک نئے ٹکڑے کی ضرورت ہے۔ ہمیں یہ جاننے کی ضرورت ہے کہ اس میں کتنے الفاظ ہیں۔ ہماری ٹیم کا کہنا ہے کہ یہ\nڈیٹا حاصل کرنا آسان ہونا چاہیے، اس لیے ہم ایک نیا متغیر، الفاظ کی گنتی شامل کریں گے۔ یہ\nہماری حالت کو بہت طویل کرنے والا ہے، اس لیے میں اسے پڑھنے میں آسانی پیدا کرنے کے لیے اسے\nمتعدد ٹکڑوں میں تقسیم کرنے والا ہوں۔ پوسٹ کی لمبائی جو ہمیں پسند نہیں ہے وہ تین الفاظ سے کم یا برابر یا 200 الفاظ سے زیادہ ہیں۔ ہم ایک یا یہاں استعمال کرتے ہیں کیونکہ یہ مشکوک ہے اگر دونوں میں سے کوئی بھی شرط درست ہے۔ ہم اس انٹرمیڈیٹ\nنتیجہ کو متغیر میں محفوظ کرتے ہیں، اور پھر ہم اسے\nاپنی خصوصیت کی حالت میں شامل کرتے ہیں۔ ہم ایک اور یہاں استعمال کرتے ہیں\nکیونکہ ہم چاہتے ہیں کہ پوسٹ کو نمایاں کرنے کے لیے یہ تینوں شرائط درست ہوں۔\n تاہم، اگر یہ مشکوک لمبائی ہے تو ہم اسے نمایاں نہیں کرنا چاہتے۔ اگر یہ مشکوک لمبائی نہیں ہے تو ہم اسے نمایاں کرنا چاہتے ہیں،\n لہذا ہم یہاں آپریٹر نہیں استعمال کرتے ہیں۔ اب آئیے اس پوسٹ کے ساتھ اپنی حالت چیک کریں جس میں کہا گیا تھا \"hiiii\"۔ اس میں ایک لفظ کی گنتی تھی،\nایک غیر جانبدارانہ جذبات، اور ایک پرانا اکاؤنٹ تھا۔ بہت اچھا، اب اس پوسٹ کو\nنمایاں نہیں کیا جا رہا ہے۔ تاہم، میں دیکھ رہا ہوں کہ\nاب مجھے ایک لِنٹ ایرر ہو رہا ہے جہاں میری لائن بہت لمبی ہے۔ اس کو ٹھیک کرنے کے لیے، میں\nاپنی حالت کو متعدد متغیرات میں تقسیم کرنے والا ہوں۔ آئیے کہتے ہیں کہ ایک مفید پوسٹ منفی نہیں ہے اور مشتبہ طوالت نہیں ہے، اور پھر آئیے\nاکاؤنٹ کی عمر کی جانچ کے نتیجے کو ایک متغیر میں اسٹور کرتے ہیں جسے ٹرسٹڈ یوزر کہتے ہیں۔ پھر ہماری حالت صرف یہ ہو\nجاتی ہے کہ اگر مفید پوسٹ ہو اور قابل اعتماد صارف ہو، جسے ایک نظر میں سمجھنا بہت آسان ہے۔ درحقیقت، یہ اتنا پڑھنے کے قابل ہے\nکہ یہ خود دستاویزی ہے، اس طرح کہ ہمیں\nاس تبصرے کی مزید ضرورت بھی نہیں ہے، کیونکہ یہ صرف وہی کہتا ہے جو\nمتغیر ناموں کی طرح ہے۔ ہم اس بات کو یقینی بنانے کے لیے کچھ اور کیسز کے ساتھ جانچ کریں گے کہ سب کچھ کام کرتا ہے، اور پھر ہم اس بات کو یقینی بنائیں گے کہ ہمارا الگورتھم ہماری سائٹ پر کس طرح کام کرتا ہے تاکہ ہم\nضرورت کے مطابق ایڈجسٹمنٹ کرتے رہیں۔",
    "t_spanish": "- [Instructor] Diseñemos un programa con expresiones booleanas compuestas. Estamos trabajando en un\nsistema automatizado de moderación de contenido para nuestro sitio. Queremos que nuestro sistema\nmarque automáticamente las publicaciones que parezcan cuestionables para que nuestro\nequipo pueda investigar más a fondo y decidir cuáles eliminar. También queremos\npromocionar automáticamente cualquier publicación que consideremos particularmente útil para que aparezca en\nla parte superior de la página. Pensemos en cómo se vería nuestro\nalgoritmo para marcar publicaciones . Nuestros moderadores nos han dicho que desconfían especialmente\nde las cuentas nuevas. No es frecuente que los usuarios\nque han estado en nuestro sitio por un tiempo de repente\ncomiencen a publicar una tonelada de spam. Por supuesto, hay\nnuevos usuarios legítimos y no queremos disuadirlos\nde usar nuestro sitio marcando sus publicaciones todo el tiempo, por lo que creemos que lo mejor que podemos\nhacer es verificar una combinación de condiciones. Tenemos disponible el\nsentimiento general de la publicación, ya sea positivo,\nneutral o negativo. Aquí lo que más nos preocupa son las\npublicaciones negativas. Definitivamente no queremos que\nlos usuarios se intimiden entre sí ni promuevan la violencia en nuestro sitio. Muy bien, ¿qué pasa ahora con nuestro algoritmo para promocionar publicaciones útiles? Queremos asegurarnos de no\npromocionar publicaciones negativas, pero queremos ser justos y\nno solo promocionar publicaciones que hablen de lo fantástico que es nuestro sitio, por lo que consideraremos tanto\npublicaciones positivas como neutrales. Luego decidimos que también\nqueremos valorar a los usuarios constantes, personas que han estado\nen nuestro sitio por un tiempo y representan voces confiables. Reconocemos que este no es\nun algoritmo perfecto, pero creemos que podría ser lo suficientemente bueno para lo que intentamos hacer aquí.  El siguiente paso, traduzcamos nuestros\nalgoritmos de moderación de contenido a código. Comenzamos con nuestros dos datos, el sentimiento de la publicación y la antigüedad de la cuenta del usuario en días. Nuestro algoritmo para marcar fue, si el sentimiento es negativo\ny la cuenta es nueva, digamos que la nueva tiene menos de una semana, eso significa que nuestra condición es que el sentimiento es igual a negativo y la antigüedad de la cuenta en\ndías es menor a siete. Es un y porque solo queremos marcar si ambas condiciones son verdaderas. Rodeamos nuestra\ncondición compuesta con una declaración if y luego, dentro de la declaración if, queremos imprimir nuestra\ndecisión de moderación de contenido. Eso les permite a nuestros moderadores saber que deben mirar más de cerca esta publicación. Bien, ahora probemos esto\nen un par de publicaciones diferentes. Una publicación negativa creada por un\nusuario nuevo debería tener esta marca, una publicación negativa creada por\nun usuario antiguo no debería aparecer y una publicación positiva creada por\nun usuario nuevo tampoco.  A continuación, trabajemos en nuestro\nalgoritmo de promoción posterior. Este algoritmo consistía en\npublicaciones neutrales o positivas de cuentas confiables. Debido a que sólo hay\ntres sentimientos posibles, positivo, neutral y negativo, esto equivale a decir que el sentimiento no es igual a negativo. Para usuarios confiables,\noptemos por una antigüedad de cuenta mayor o igual a 30 días. No es el equivalente perfecto, pero creemos que proporcionará\nuna buena aproximación. Entonces agregamos nuestra declaración if, y luego dentro de la declaración if, solo queremos indicar que\nla publicación ha sido destacada, por lo que sangramos una llamada a la función de impresión\ndentro de la declaración if. Luego, repasemos algunos casos de prueba para asegurarnos de que esto funcione según lo previsto. Una publicación negativa de un usuario de confianza, una publicación positiva de un usuario nuevo y una publicación neutral de un usuario de confianza. Lo tenemos funcionando, pero queremos\nrefinar un poco nuestro algoritmo. Estamos notando que se están destacando algunas\npublicaciones que no son muy útiles , como esa\npublicación que teníamos al principio que decía \"hola\". Creemos que podemos hacer una\nbuena generalización aquí: las publicaciones que son\nsúper cortas o súper largas probablemente no sean las más útiles, así que agreguemos otra\ncondición a nuestro caso de características. Para hacer esto, necesitamos una\nnueva información sobre cada publicación. Necesitamos saber cuántas palabras tiene. Nuestro equipo dice que debería\nser fácil obtener estos datos, por lo que agregaremos una nueva variable, el recuento de palabras. Esto está a punto de hacer que\nnuestra condición sea muy larga, así que la\ndividiré en varias partes para que sea más fácil de leer.  Las longitudes de las publicaciones que no nos gustan son menores o iguales a tres palabras o mayores a 200 palabras. Usamos o aquí porque es sospechoso si alguna de las condiciones es verdadera. Almacenamos ese\nresultado intermedio en una variable y luego lo agregamos a\nnuestra condición de característica. Usamos un y aquí\nporque queremos que estas tres condiciones sean verdaderas\npara poder presentar la publicación. Sin embargo, no queremos presentarlo si tiene una longitud sospechosa. Queremos destacarlo si\nno es una longitud sospechosa, por eso usamos el operador not aquí. Ahora revisemos nuestra condición con esa publicación que decía \"hola\". Tenía una palabra\n, un sentimiento neutral y un relato bastante antiguo. Genial, ahora esa publicación\nya no aparece. Sin embargo, veo que\nahora aparece un error de pelusa porque mi línea es demasiado larga. Para solucionar este problema,\ndividiré mi condición en múltiples variables. Digamos que una publicación útil no es negativa ni tiene una longitud sospechosa, y luego almacenemos el\nresultado de la verificación de antigüedad de la cuenta en una variable llamada usuario confiable. Entonces nuestra condición simplemente\nse convierte en si es una publicación útil y es un usuario confiable, lo cual es mucho más fácil de entender de un vistazo. De hecho, es tan legible\nque se autodocumenta, de modo que ya ni siquiera\nnecesitamos este comentario, porque simplemente dice lo mismo\nque los nombres de las variables. Continuaremos y probaremos con algunos casos más para asegurarnos de que todo funcione, y luego nos aseguraremos de monitorear cómo funciona nuestro algoritmo en nuestro sitio para que podamos seguir haciendo\nlos ajustes necesarios.",
    "t_arabic": "- [المدرس] لنصمم برنامجًا يحتوي على تعبيرات منطقية مركبة. نحن نعمل على إنشاء\nنظام آلي للإشراف على المحتوى لموقعنا. نريد أن يقوم نظامنا\nتلقائيًا بالإبلاغ عن المشاركات التي تبدو مشكوكًا فيها حتى\nيتمكن فريقنا من إجراء مزيد من التحقيق وتحديد المشاركات التي يجب إزالتها. نريد أيضًا\nالترويج تلقائيًا لأي منشورات نعتقد أنها مفيدة بشكل خاص بحيث تظهر في\nأعلى الصفحة. دعونا نفكر في الشكل الذي قد تبدو عليه الخوارزمية الخاصة بنا\nلوضع علامة على المنشورات . أخبرنا المشرفون لدينا أنهم يشعرون\nبالقلق بشكل خاص تجاه الحسابات الجديدة. ليس من المعتاد في كثير من الأحيان أن يبدأ المستخدمون\nالموجودون على موقعنا لفترة من الوقت فجأة في\nنشر الكثير من الرسائل غير المرغوب فيها. هناك، بالطبع،\nمستخدمون جدد شرعيون، ولا نريد أن\nنثنيهم عن استخدام موقعنا عن طريق الإبلاغ عن منشوراتهم طوال الوقت، لذلك نعتقد أن أفضل ما يمكن\nفعله هو التحقق من مجموعة من الشروط. لدينا\nالشعور العام بالمنشور، سواء كان إيجابيًا أو\nمحايدًا أو سلبيًا. هنا، نحن أكثر قلقًا\nبشأن المشاركات السلبية. نحن بالتأكيد لا نريد أن يقوم\nالمستخدمون بالتسلط على بعضهم البعض أو الترويج للعنف على موقعنا. حسنًا، ماذا عن الخوارزمية التي نستخدمها للترويج للمشاركات المفيدة؟ نريد أن نتأكد من عدم\nالترويج للمشاركات السلبية، ولكننا نريد أن نكون منصفين\nوألا نكتفي بالترويج للمشاركات التي تتحدث عن مدى روعة موقعنا، لذلك سنأخذ في الاعتبار\nالمشاركات الإيجابية والمحايدة. ثم قررنا أننا\nنريد أيضًا تقدير المستخدمين الدائمين، والأشخاص الموجودين\nعلى موقعنا لفترة من الوقت ويمثلون أصواتًا موثوقة. نحن ندرك أن هذه ليست\nخوارزمية مثالية، ولكننا نعتقد أنها قد تكون جيدة بما يكفي لما نحاول القيام به هنا. الخطوة التالية هي ترجمة\nخوارزميات الإشراف على المحتوى لدينا إلى تعليمات برمجية. نبدأ بجزئي البيانات لدينا، الشعور بالمنشور وعمر حساب المستخدم بالأيام.  كانت خوارزمية الإبلاغ لدينا هي أنه إذا كانت المشاعر سلبية\nوالحساب جديد، فلنفترض أن عمر الحساب الجديد أقل من أسبوع، فهذا يعني أن حالتنا هي أن المشاعر تساوي سلبية وعمر الحساب بالأيام\nأقل من سبعة. إنها و لأننا نريد فقط وضع علامة إذا كان كلا الشرطين صحيحين. نحن نحيط شرطنا المركب\nبعبارة if، ثم داخل عبارة if، نريد طباعة\nقرارنا الخاص بالإشراف على المحتوى. يتيح ذلك لمشرفينا معرفة كيفية إلقاء نظرة فاحصة على هذا المنشور. حسنًا، دعونا الآن نختبر ذلك\nفي منشورين مختلفين.  يجب أن تحصل المشاركة السلبية التي ينشئها\nمستخدم جديد على هذه العلامة، ولا ينبغي أن تحصل المشاركة السلبية التي ينشئها\nمستخدم منذ فترة طويلة على هذه العلامة، \nولا ينبغي أيضًا أن تحصل المشاركة الإيجابية التي ينشئها مستخدم جديد. دعونا نعمل على\nخوارزمية ما بعد الترويج بعد ذلك. كانت هذه الخوارزمية عبارة عن\nمشاركات محايدة أو إيجابية من حسابات موثوقة. نظرًا لوجود\nثلاثة مشاعر محتملة فقط، إيجابية ومحايدة وسلبية، فإن هذا يعادل القول بأن المشاعر لا تساوي المشاعر السلبية. بالنسبة للمستخدمين الموثوق بهم، دعنا\nنختار عمر الحساب أكبر من أو يساوي 30 يومًا. وهذا ليس المعادل المثالي، لكننا نعتقد أنه سيوفر\nتقديرًا تقريبيًا جيدًا. لذلك نضيف عبارة if الخاصة بنا، ثم داخل عبارة if، نريد فقط الإشارة إلى أن\nالمنشور قد تم تمييزه، لذلك نضع مسافة بادئة لاستدعاء دالة الطباعة\nداخل عبارة if. ثم دعونا نجري بعض حالات الاختبار للتأكد من أن هذا يعمل على النحو المنشود. منشور سلبي من مستخدم موثوق، ومنشور إيجابي من مستخدم جديد، ومنشور محايد من مستخدم موثوق.  لقد نجحنا، ولكننا نريد\nتحسين الخوارزمية قليلاً.  لقد لاحظنا أنه يتم تمييز بعض\nالمنشورات غير المفيدة للغاية، مثل تلك\nالمشاركة التي كانت لدينا في البداية والتي تقول للتو \"hiiiii\". نعتقد أنه يمكننا إجراء\nتعميم جيد هنا بأن المنشورات\nالقصيرة جدًا أو الطويلة جدًا ربما لا تكون الأكثر فائدة، لذلك دعونا نضيف\nشرطًا آخر إلى حالة الميزات الخاصة بنا. للقيام بذلك، نحتاج إلى\nمعلومات جديدة حول كل مشاركة. علينا أن نعرف عدد الكلمات التي تحتوي عليها. يقول فريقنا أنه من المفترض أن\nيكون من السهل الحصول على هذه البيانات، لذلك سنضيف متغيرًا جديدًا، وهو عدد الكلمات. هذا على وشك جعل\nحالتنا طويلة جدًا، لذا سأقوم\nبتقسيمها إلى أجزاء متعددة لتسهيل قراءتها. أطوال المشاركات التي لا نحبها أقل أو تساوي ثلاث كلمات أو أكبر من 200 كلمة. نستخدم أو هنا لأنه من المشكوك فيه أن يكون أي من الشرطين صحيحًا. نقوم بتخزين تلك\nالنتيجة المتوسطة في متغير، ثم نضيفها إلى\nحالة الميزة الخاصة بنا. نستخدم \"و\" هنا\nلأننا نريد أن تكون هذه الشروط الثلاثة صحيحة\nحتى يتم عرض المنشور. ومع ذلك، لا نريد أن نبرزه إذا كان طوله مريبًا. نريد تمييزه إذا\nلم يكن طوله مريبًا، لذلك نستخدم عامل التشغيل not هنا. الآن دعونا نتحقق من حالتنا من خلال تلك المشاركة التي تقول \"hiiiii\". كان عدد كلماته\nواحدًا، ومشاعر محايدة، وحسابًا قديمًا جدًا. عظيم، الآن\nلم يعد هذا المنشور مميزًا. ومع ذلك، أرى أنني\nأتلقى الآن خطأً حيث أن خطي طويل جدًا. لإصلاح ذلك، سأقوم\nبتقسيم حالتي إلى متغيرات متعددة. لنفترض أن المنشور المفيد ليس سلبيًا وليس طوله مشبوهًا، ثم دعنا نخزن\nنتيجة التحقق من عمر الحساب في متغير يسمى المستخدم الموثوق به. ثم تصبح حالتنا مجرد\nمنشور مفيد ومستخدم موثوق به، وهو أمر يسهل فهمه بنظرة واحدة. في الواقع، إنه سهل القراءة\nلدرجة أنه يوثق ذاتيًا، لدرجة أننا لا\nنحتاج حقًا إلى هذا التعليق بعد الآن، لأنه يقول نفس\nالشيء مثل أسماء المتغيرات. سنستمر ونختبر بعض الحالات الإضافية للتأكد من أن كل شيء يعمل، وبعد ذلك سنتأكد من مراقبة كيفية أداء الخوارزمية لدينا على موقعنا حتى نتمكن من الاستمرار في إجراء\nالتعديلات حسب الحاجة.",
    "t_italian": "- [Istruttore] Progettiamo un programma con espressioni booleane composte. Stiamo lavorando a un\nsistema automatizzato di moderazione dei contenuti per il nostro sito. Vogliamo che il nostro sistema\nsegnali automaticamente i post che sembrano discutibili in modo che il nostro\nteam possa indagare ulteriormente e decidere quali rimuovere. Vogliamo anche\npromuovere automaticamente tutti i post che riteniamo particolarmente utili in modo che appaiano nella\nparte superiore della pagina. Pensiamo a come potrebbe apparire il nostro\nalgoritmo per contrassegnare i post . I nostri moderatori ci hanno detto che sono particolarmente\ndiffidenti nei confronti dei nuovi account. Non capita spesso che gli utenti\nche sono sul nostro sito da un po' di tempo\ninizino all'improvviso a pubblicare una tonnellata di spam. Ci sono, ovviamente,\nnuovi utenti legittimi e non vogliamo scoraggiarli\ndall'utilizzare il nostro sito contrassegnando continuamente i loro post, quindi riteniamo che la cosa migliore\nda fare potrebbe essere verificare una combinazione di condizioni. Abbiamo a disposizione il\nsentiment generale del post, sia esso positivo,\nneutro o negativo. Qui, siamo più preoccupati\nper i post negativi. Non vogliamo assolutamente che\ngli utenti si facciano bullismo a vicenda o promuovano la violenza sul nostro sito. Va bene, ora che ne dici del nostro algoritmo per promuovere post utili? Vogliamo assicurarci di non\npromuovere post negativi, ma vogliamo essere onesti e\nnon promuovere solo post che parlano di quanto sia fantastico il nostro sito, quindi considereremo sia i\npost positivi che quelli neutri. Poi abbiamo deciso di\nvalorizzare anche gli utenti costanti, persone che sono\nsul nostro sito da un po' e che rappresentano voci fidate. Riconosciamo che questo non è\nun algoritmo perfetto, ma pensiamo che potrebbe essere abbastanza buono per quello che stiamo cercando di fare qui. Passaggio successivo, traduciamo i nostri\nalgoritmi di moderazione dei contenuti in codice. Iniziamo con i nostri due dati, il sentiment del post e l'età dell'account dell'utente in giorni. Il nostro algoritmo per la segnalazione prevedeva che, se il sentiment è negativo\ne l'account è nuovo, supponiamo che il nuovo sia vecchio da meno di una settimana, ciò significa che la nostra condizione è che il sentiment è uguale uguale a negativo e l'età dell'account in\ngiorni è inferiore a sette. È un e perché vogliamo contrassegnare solo se entrambe le condizioni sono vere. Circondiamo la nostra\ncondizione composta con un'istruzione if, quindi all'interno dell'istruzione if vogliamo stampare la nostra\ndecisione sulla moderazione dei contenuti. Ciò consente ai nostri moderatori di dare un'occhiata più da vicino a questo post. Ok, ora proviamolo\nsu un paio di post diversi. Un post negativo creato da un\nnuovo utente dovrebbe ricevere questo flag, un post negativo creato da\nun utente di lunga data non dovrebbe farlo e nemmeno un post positivo creato da\nun nuovo utente.  Successivamente lavoriamo sul nostro\nalgoritmo di post-promozione. Questo algoritmo riguardava\npost neutri o positivi provenienti da account attendibili. Poiché esistono solo\ntre possibili sentimenti, positivo, neutro e negativo, ciò equivale a dire che il sentimento non è uguale a negativo. Per gli utenti fidati,\nscegliamo un'età dell'account maggiore o uguale a 30 giorni. Non è l'equivalente perfetto, ma pensiamo che fornirà\nuna buona approssimazione. Quindi aggiungiamo la nostra istruzione if, e poi all'interno dell'istruzione if, vogliamo solo segnalare che\nil post è stato messo in evidenza, quindi indentiamo una chiamata alla funzione print\nall'interno dell'istruzione if. Quindi esaminiamo alcuni casi di test per assicurarci che funzioni come previsto. Un post negativo di un utente fidato, un post positivo di un nuovo utente e un post neutro di un utente fidato. Funziona, ma vogliamo\nperfezionare un po' il nostro algoritmo. Stiamo notando che alcuni\npost non molto utili vengono visualizzati in primo piano, come quel\npost che avevamo all'inizio che diceva semplicemente \"ciaoiii\". Pensiamo di poter fare una\nbuona generalizzazione qui dicendo che i post\nsuper brevi o super lunghi probabilmente non sono i più utili, quindi aggiungiamo un'altra\ncondizione al nostro caso specifico. Per fare ciò, abbiamo bisogno di una\nnuova informazione su ogni post. Dobbiamo sapere quante parole ha. Il nostro team dice che dovrebbe\nessere facile ottenere questi dati, quindi aggiungeremo una nuova variabile, il conteggio delle parole. Questo renderà la\nnostra condizione molto lunga, quindi la\nsuddividerò in più parti per facilitarne la lettura.  Le lunghezze dei post che non ci piacciono sono inferiori o uguali a tre parole o superiori a 200 parole. Usiamo o qui perché è sospetto se una delle due condizioni è vera. Memorizziamo il\nrisultato intermedio in una variabile e poi lo aggiungiamo alla\ncondizione della nostra caratteristica. Usiamo e qui\nperché vogliamo che tutte e tre queste condizioni siano vere\nper poter mettere in evidenza il post. Tuttavia, non vogliamo presentarlo se la sua lunghezza è sospetta. Vogliamo evidenziarlo se\nnon è una lunghezza sospetta, quindi utilizziamo l'operatore not qui. Ora controlliamo la nostra condizione con quel post che diceva \"ciaoiii\". Aveva un numero di parole pari a\nuno, un sentimento neutro e un resoconto piuttosto vecchio. Ottimo, ora quel post\nnon viene più pubblicato. Tuttavia, vedo che\nora viene visualizzato un errore di lanugine in cui la mia riga è troppo lunga. Per risolvere questo problema,\nsuddividerò la mia condizione in più variabili. Supponiamo che un post utile non sia negativo e non abbia una lunghezza sospetta, quindi memorizziamo il\nrisultato del controllo dell'età dell'account in una variabile denominata utente attendibile. Quindi la nostra condizione\ndiventa semplicemente se il post è utile ed è un utente fidato, il che è molto più facile da capire a colpo d'occhio. In effetti, è così leggibile\nche si autodocumenta, tanto che non abbiamo nemmeno\npiù bisogno di questo commento, perché dice semplicemente la stessa\ncosa dei nomi delle variabili. Continueremo a testare alcuni altri casi per assicurarci che tutto funzioni, quindi ci assicureremo di monitorare il funzionamento del nostro algoritmo sul nostro sito in modo da poter continuare ad apportare\nle modifiche necessarie."
}