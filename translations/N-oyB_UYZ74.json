{
    "source": "N-oyB_UYZ74",
    "youtubelink": "https://www.youtube.com/watch?v=N-oyB_UYZ74",
    "t_english": "- Let's trace a program step by step. This is a common pattern we'll use to understand what the computer is doing under the hood when we press the Run button. Tracing program execution like this helps us better read and write programs because we can start to predict what the computer's going to do with each instruction without having to go through a long process of trial and error. For now, we'll write this all out together so we can make sense of what's happening here, but eventually, we'll get familiar enough with Python where we can trace small blocks of code like this in our heads. When you press Run, the computer looks at your program line by line. It isn't smart enough to zoom out and look at the big picture and try and understand what the program is trying to do as a whole. When I say line by line, I literally mean that the computer is going to load each line of your program into its working memory one by one. And then with one instruction loaded into its working memory, it's going to interpret that instruction in isolation, in total isolation. Now, remember that the computer is not a mind reader. So it doesn't understand any nuance or intention behind your instruction. It's only going to do literally what that instruction says according to whatever rules of Python. Let's see that in action by tracing this program. The computer takes the first line of the program and loads that into working memory. Then the first thing it's gonna do is look for any expressions to evaluate. Remember that evaluating an expression just simplifies it down to a single value. Here we have the expression, the integer four plus the float, 20.55. And that evaluates to the float 24.55. Now, all our expressions have been simplified, so the computer's gonna peek outside the parentheses and ask, \"Well, what did you want me to do with this value?\" The instruction print tells it to take the value inside the parentheses and go display that in the console. So it goes over here and it prints 24.55. This instruction is complete, so the computer's ready to move to the next step, but first it wants to optimize its brain space. It doesn't really need to remember this instruction anymore, it doesn't need this information. So it just clears out its working memory and forgets, and that makes room for the next instruction. Now, the computer loads the second line into its working memory. And again, it looks for any expressions to evaluate. It sees the expression three plus two, and it simplifies that down to the integer five. Notice that there's no print instruction here. We didn't actually ask the computer to do anything with that value. So the computer's thinking, \"Well, hey, I just did all this work. I figured out the answer's five, but I guess you don't want me to tell you. So it shrugs whatever, and it clears its working memory out, forgets that five, and just moves on. Third line, the computer loads, print the string learn plus the string space. Careful, this is not the empty string. There's one little space character in between these quotation marks. Plus the string more. But there are two operators in this expression. There's two plus signs. So the computer's actually going to evaluate this expression in two steps, reading left to right. First, it evaluates the expression, learn plus space. Now, when we add strings, remember that we are concatenating. We are smushing together. So we get the string learn space. Then we add the string more. We concatenate and we get learn space more. We're down to a single value, so the computer peaks outside the parentheses, sees that we wanted to print that value, and it prints learn space more in the console. Finally, it clears its working memory and it moves to the next line. What do you think the last two lines of this program do? Take a second and try and trace it yourself. Okay, this instruction has the expression, the string 81 plus the string 19.42. Now, these may look like integers and floats, but because there are quotation marks around them, the computer's going to treat them like strings. So when we evaluate this expression, we're concatenating strings and we get the string 8119.42. Nothing left to simplify here. So the computer pops outside the parentheses, sees the print, and then prints 8119.42 to the console. Then it clears out working memory and moves to the last line. The computer loads the last line of the program into working memory. Notice that this whole thing inside the parentheses here is surrounded by quotation marks. That means this is already a single value. It's the string, the two character, space character, plus character, space character, two character. It's not the expression the integer two plus two. Because we already have a single value, there's nothing to simplify here. So the computer pops out the parentheses, sees the instruction print, prints two space plus space two to the console, and clears working memory. Then it jumps to the next line of the program, and oh, there is no next line. We are at the end, we did it. So the computer terminates the program execution, it exits, and we have a final result here in the console. Wanna check my work? Copy this program into a code editor and run it for yourself. Is the result the same? \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n",
    "t_urdu": "- آئیے قدم بہ قدم ایک پروگرام کا پتہ لگائیں۔ یہ ایک عام نمونہ ہے جسے ہم یہ سمجھنے کے لیے استعمال کریں گے کہ\n جب ہم رن بٹن دبائیں گے تو کمپیوٹر ہڈ کے نیچے کیا کر رہا ہے۔ ٹریسنگ پروگرام پر عمل درآمد اس طرح پروگراموں کو پڑھنے اور لکھنے میں ہماری مدد کرتا ہے کیونکہ ہم یہ اندازہ لگا سکتے ہیں کہ کمپیوٹر\nہر ہدایات کے ساتھ کیا کرنے جا رہا ہے بغیر آزمائش اور غلطی کے طویل عمل سے گزرے۔ ابھی کے لیے، ہم یہ سب ایک ساتھ لکھیں گے تاکہ ہم سمجھ سکیں کہ\nیہاں کیا ہو رہا ہے، لیکن آخر کار، ہم\nPython سے کافی واقف ہو جائیں گے جہاں ہم اپنے سروں میں اس طرح کے کوڈ کے چھوٹے بلاکس کو ٹریس کر سکتے ہیں۔\n جب آپ رن کو دباتے ہیں تو کمپیوٹر\nآپ کے پروگرام کی لائن بذریعہ لائن دیکھتا ہے۔ یہ اتنا ہوشیار نہیں ہے کہ زوم آؤٹ کرکے بڑی تصویر کو دیکھیں\nاور کوشش کریں اور سمجھیں کہ پروگرام\nمجموعی طور پر کیا کرنے کی کوشش کر رہا ہے۔ جب میں سطر بذریعہ کہتا ہوں تو میرا لفظی مطلب یہ ہوتا ہے کہ کمپیوٹر\nآپ کے پروگرام کی ہر لائن کو ایک ایک کرکے اپنی ورکنگ میموری میں لوڈ کر رہا ہے۔ اور پھر اس کی ورکنگ میموری میں بھری ہوئی ایک ہدایات کے ساتھ، یہ اس\nہدایت کی مکمل تنہائی میں، تنہائی میں تشریح کرنے جا رہا ہے۔ اب یاد رکھیں کہ\nکمپیوٹر مائنڈ ریڈر نہیں ہے۔ لہذا یہ آپ کی ہدایات کے پیچھے کسی بھی نزاکت یا ارادے کو نہیں سمجھتا ہے۔ یہ صرف لفظی طور پر وہی کرنے جا رہا ہے\nجو کہ ہدایت پائیتھن کے جو بھی اصولوں کے مطابق کہتی ہے۔ آئیے دیکھتے ہیں کہ\nاس پروگرام کو ٹریس کر کے عمل میں ہے۔ کمپیوٹر\nپروگرام کی پہلی لائن لیتا ہے اور اسے ورکنگ میموری میں لوڈ کرتا ہے۔ پھر پہلی چیز جو یہ کرنے والا ہے وہ ہے کسی بھی تاثرات کی جانچ کرنا۔ یاد رکھیں کہ کسی اظہار کی جانچ کرنا اسے صرف ایک قدر تک آسان بنا دیتا ہے۔ یہاں ہمارے پاس اظہار ہے، عدد چار جمع فلوٹ، 20.55۔ اور یہ فلوٹ 24.55 کا اندازہ کرتا ہے۔ اب، ہمارے تمام تاثرات کو\nآسان کر دیا گیا ہے، تو کمپیوٹر\nقوسین کے باہر جھانک کر پوچھے گا، \"اچھا، تم\nاس قدر کے ساتھ کیا کرنا چاہتے تھے؟\" انسٹرکشن پرنٹ\nاسے قوسین کے اندر ویلیو لینے اور\nکنسول میں ڈسپلے کرنے کو کہتا ہے۔ تو یہ یہاں جاتا ہے اور یہ 24.55 پرنٹ کرتا ہے۔ یہ ہدایت مکمل ہے، لہذا کمپیوٹر\nاگلے مرحلے پر جانے کے لیے تیار ہے، لیکن پہلے وہ\nاپنے دماغ کی جگہ کو بہتر بنانا چاہتا ہے۔ اسے واقعی\nاس ہدایت کو یاد رکھنے کی ضرورت نہیں ہے، اسے اس معلومات کی ضرورت نہیں ہے۔ تو یہ صرف اس کی\nکام کرنے والی یادداشت کو صاف کرتا ہے اور بھول جاتا ہے، اور اس سے\nاگلی ہدایات کی گنجائش ہوتی ہے۔ اب، کمپیوٹر دوسری لائن کو اپنی ورکنگ میموری میں لوڈ کرتا ہے۔ اور ایک بار پھر، یہ جانچنے کے لیے کسی بھی تاثرات کو تلاش کرتا ہے۔\n یہ تین جمع دو کے اظہار کو دیکھتا ہے، اور یہ اسے پانچ عدد تک آسان بنا دیتا ہے۔\n نوٹ کریں کہ\nیہاں پرنٹ کی کوئی ہدایت نہیں ہے۔ ہم نے دراصل کمپیوٹر سے اس قدر کے ساتھ کچھ کرنے کو نہیں کہا۔ تو کمپیوٹر کی سوچ، \"ٹھیک ہے، ارے، میں نے ابھی یہ سب کام کیا ہے۔ میں نے جواب کے پانچ کا پتہ لگایا، لیکن میرا اندازہ ہے کہ آپ نہیں چاہتے کہ میں آپ کو بتاؤں۔ تو یہ جو کچھ بھی ہو، کندھے اچکاتا ہے، اور یہ\nاپنی ورکنگ میموری کو صاف کرتا ہے، وہ پانچ بھول جاتا ہے، اور کمپیوٹر لوڈ کرتا ہے، سٹرنگ کو پرنٹ کرتا ہے اور\nسٹرنگ اسپیس کے علاوہ، یہ خالی سٹرنگ نہیں ہے۔ لیکن اس ایکسپریشن میں دو آپریٹرز ہیں\n تو کمپیوٹر\nاس ایکسپریشن کو دو مراحل میں جانچتا ہے، پہلے یہ ایکسپریشن کا اندازہ لگاتا ہے،\n اب جب ہم سٹرنگز جوڑتے ہیں۔ یاد رکھیں کہ ہم سٹرنگ سیکھ رہے ہیں تو ہم سٹرنگ کو مزید جوڑتے ہیں اور ہم\n ایک ہی قدر سے \nباہر ہو جاتے ہیں۔  قوسین، دیکھتا ہے کہ ہم اس قدر کو پرنٹ کرنا چاہتے ہیں، اور یہ کنسول میں مزید سیکھنے کی جگہ کو پرنٹ کرتا ہے۔\n آخر میں، یہ اپنی ورکنگ میموری کو صاف کرتا ہے اور یہ اگلی لائن پر چلا جاتا ہے۔ آپ کے خیال میں\nاس پروگرام کی آخری دو سطریں کیا کرتی ہیں؟ ایک سیکنڈ لیں اور کوشش کریں\nاور خود اس کا سراغ لگائیں۔ ٹھیک ہے، اس ہدایت میں اظہار ہے، سٹرنگ 81 پلس سٹرنگ 19.42۔ اب، یہ انٹیجرز اور فلوٹس کی طرح نظر آسکتے ہیں،\n لیکن چونکہ\nان کے ارد گرد کوٹیشن مارکس ہیں، کمپیوٹر\nان کے ساتھ تاروں کی طرح سلوک کرے گا۔ لہذا جب ہم اس اظہار کا اندازہ کرتے ہیں، تو ہم سٹرنگز کو جوڑ رہے ہیں اور ہمیں سٹرنگ 8119.42 ملتی ہے۔ یہاں آسان بنانے کے لیے کچھ نہیں بچا۔ تو کمپیوٹر\nقوسین کے باہر پاپ کرتا ہے، پرنٹ دیکھتا ہے، اور پھر\nکنسول پر 8119.42 پرنٹ کرتا ہے۔ پھر یہ ورکنگ میموری کو صاف کرتا ہے اور آخری لائن پر چلا جاتا ہے۔ کمپیوٹر\nپروگرام کی آخری لائن کو ورکنگ میموری میں لوڈ کرتا ہے۔ غور کریں کہ یہاں قوسین کے اندر یہ ساری چیز\n کوٹیشن مارکس سے گھری ہوئی ہے۔ اس کا مطلب ہے کہ یہ پہلے سے ہی ایک واحد قدر ہے۔ یہ تار ہے، دو کریکٹر، اسپیس کریکٹر، پلس\nکریکٹر، اسپیس کریکٹر، دو کریکٹر۔ یہ\nعدد دو جمع دو کا اظہار نہیں ہے۔ کیونکہ ہمارے پاس پہلے سے ہی ایک قدر ہے، یہاں آسان بنانے کے لیے کچھ نہیں ہے۔ تو کمپیوٹر قوسین کو پاپ آؤٹ کرتا ہے، انسٹرکشن پرنٹ دیکھتا ہے، کنسول میں دو اسپیس پلس\nاسپیس ٹو پرنٹ کرتا ہے، اور ورکنگ میموری کو صاف کرتا ہے۔ پھر یہ\nپروگرام کی اگلی لائن پر چھلانگ لگاتا ہے، اور اوہ، کوئی اگلی لائن نہیں ہے۔ ہم آخر میں ہیں، ہم نے یہ کیا۔ تو کمپیوٹر پروگرام کے عمل کو ختم کرتا ہے،\n یہ باہر نکلتا ہے، اور ہمارے پاس\nیہاں کنسول میں حتمی نتیجہ ہے۔ میرا کام چیک کرنا چاہتے ہیں؟ اس پروگرام کو کوڈ ایڈیٹر میں کاپی کریں اور اسے خود چلائیں۔ کیا نتیجہ ایک ہی ہے؟",
    "t_spanish": "- Tracemos un programa paso a paso. Este es un patrón común que usaremos para comprender qué hace la computadora\ndebajo del capó cuando presionamos el botón Ejecutar. El seguimiento de la ejecución de programas como este nos ayuda a leer y escribir programas mejor porque podemos comenzar a predecir qué hará la computadora\ncon cada instrucción sin tener que pasar por un largo proceso de prueba y error. Por ahora, escribiremos todo esto juntos para que podamos entender\nlo que está sucediendo aquí, pero eventualmente nos\nfamiliarizaremos lo suficiente con Python como para poder rastrear pequeños\nbloques de código como este en nuestras cabezas. Cuando presiona Ejecutar, la computadora mira\nsu programa línea por línea. No es lo suficientemente inteligente como para alejarse y mirar el panorama general\ne intentar comprender lo que el programa\nintenta hacer en su conjunto. Cuando digo línea por línea, quiero decir literalmente que la computadora\ncargará cada línea de su programa en su memoria de trabajo una por una. Y luego, con una instrucción cargada en su memoria de trabajo, interpretará esa\ninstrucción de forma aislada, en total aislamiento. Ahora bien, recuerde que la\ncomputadora no lee la mente. Por lo tanto, no comprende ningún matiz o intención detrás de sus instrucciones. Solo hará literalmente\nlo que dice esa instrucción de acuerdo con las reglas de Python. Veámoslo en acción\nrastreando este programa. La computadora toma la\nprimera línea del programa y la carga en la memoria de trabajo. Luego, lo primero que hará será buscar expresiones para evaluar. Recuerde que evaluar una expresión simplemente la simplifica a un solo valor. Aquí tenemos la expresión, el número entero cuatro más el flotante, 20,55. Y eso equivale a la flotación 24,55. Ahora, todas nuestras expresiones se\nhan simplificado, por lo que la computadora\nmirará fuera del paréntesis y preguntará: \"Bueno, ¿qué\nquerías que hiciera con este valor?\" La instrucción print le\nindica que tome el valor dentro del paréntesis y\nlo muestre en la consola. Entonces va aquí e imprime 24,55. Esta instrucción está completa, por lo que la computadora está lista\npara pasar al siguiente paso, pero primero quiere\noptimizar su espacio cerebral. Realmente ya no necesita\nrecordar esta instrucción, no necesita esta información. Así que simplemente borra su\nmemoria de trabajo y lo olvida, y eso deja espacio para\nla siguiente instrucción. Ahora, la computadora carga la segunda línea en su memoria de trabajo. Y nuevamente, busca\nexpresiones para evaluar. Ve la expresión tres más dos y la simplifica\nhasta el número entero cinco. Observe que aquí no hay\ninstrucciones de impresión.  En realidad, no le pedimos a la computadora que hiciera nada con ese valor. Entonces la computadora piensa: \"Bueno, acabo de hacer todo este trabajo. Descubrí que la respuesta es cinco, pero supongo que no quieres que te lo diga. Así que se encoge de hombros y\nborra su memoria de trabajo. olvida ese cinco y continúa. Tercera línea, la computadora carga, imprime la cadena aprender\nmás el espacio de la cadena. Cuidado, esta no es la cadena vacía. Hay un pequeño espacio entre estas comillas más la cadena. Pero hay dos operadores\nen esta expresión. Hay dos signos más. Entonces la computadora\nevaluará esta expresión en dos pasos, leyendo de izquierda a derecha. Primero, evalúa la\nexpresión, aprende el espacio más. Recuerde que estamos concatenando. Estamos juntando. Entonces obtenemos el espacio de aprendizaje de la cadena. Luego agregamos la cadena más. Concatenamos y\nobtenemos más espacio de aprendizaje, por lo que la computadora alcanza su punto máximo\nfuera del.  entre paréntesis, ve que queríamos imprimir ese valor e imprime más espacio de aprendizaje\nen la consola. Finalmente, borra su memoria de trabajo y pasa a la siguiente línea.  ¿ Qué crees que\nhacen las dos últimas líneas de este programa? Tómate un segundo e intenta\nrastrearlo tú mismo. Bien, esta instrucción tiene la expresión, la cadena 81 más la cadena 19.42. Ahora, estos pueden parecer\nnúmeros enteros y flotantes, pero debido a que están\nentre comillas, la computadora\nlos tratará como cadenas. Entonces, cuando evaluamos esta expresión, concatenamos cadenas y obtenemos la cadena 8119.42. No queda nada que simplificar aquí. Entonces la computadora sale\ndel paréntesis, ve la impresión y luego\nimprime 8119.42 en la consola. Luego borra la memoria de trabajo y pasa a la última línea. La computadora carga la\núltima línea del programa en la memoria de trabajo. Observe que todo esto\ndentro del paréntesis aquí está entre comillas. Eso significa que este ya es un valor único. Es la cadena, los dos caracteres, el carácter de espacio, el\ncarácter más, el carácter de espacio, los dos caracteres. No es la expresión\nel número entero dos más dos. Como ya tenemos un valor único, no hay nada que simplificar aquí. Entonces la computadora saca los paréntesis, ve la instrucción impresa, imprime dos espacios más el\nespacio dos en la consola y borra la memoria de trabajo. Luego salta a la\nsiguiente línea del programa y, oh, no hay línea siguiente. Estamos al final, lo logramos. Entonces la computadora finaliza\nla ejecución del programa, sale y tenemos un\nresultado final aquí en la consola.  ¿ Quieres comprobar mi trabajo? Copie este programa en un editor de código y ejecútelo usted mismo.  ¿ El resultado es el mismo?",
    "t_arabic": "- دعونا نتتبع البرنامج خطوة بخطوة. هذا هو النمط الشائع الذي سنستخدمه لفهم ما\nيفعله الكمبيوتر تحت الغطاء عندما نضغط على زر التشغيل.  يساعدنا تتبع تنفيذ البرنامج مثل هذا على قراءة البرامج وكتابتها بشكل أفضل لأنه يمكننا البدء في التنبؤ بما سيفعله الكمبيوتر\nبكل تعليمات دون الاضطرار إلى المرور بعملية طويلة من التجربة والخطأ. في الوقت الحالي، سنكتب كل هذا معًا حتى نتمكن من فهم\nما يحدث هنا، لكن في النهاية، سنتعرف بشكل\nكافٍ على لغة بايثون حيث يمكننا تتبع\nكتل صغيرة من التعليمات البرمجية مثل هذه في رؤوسنا. عند الضغط على \"تشغيل\"، يقوم الكمبيوتر بفحص\nبرنامجك سطرًا تلو الآخر. ليس من الذكاء أن تقوم بتصغير الصورة الكبيرة وإلقاء نظرة عليها\nومحاولة فهم ما\nيحاول البرنامج القيام به ككل. عندما أقول سطرًا سطرًا، أعني حرفيًا أن الكمبيوتر سيقوم\nبتحميل كل سطر من برنامجك إلى ذاكرته العاملة واحدًا تلو الآخر. ومن ثم، مع تحميل تعليمات واحدة في ذاكرته العاملة، فإنه سوف يفسر تلك\nالتعليمات بمعزل عن غيرها، بمعزل تام. الآن، تذكر أن\nالكمبيوتر ليس قارئًا للأفكار. لذلك فهو لا يفهم أي فارق بسيط أو نية وراء تعليماتك. ستفعل فقط\nما تقوله هذه التعليمات حرفيًا وفقًا لأي قواعد في بايثون. دعونا نرى ذلك عمليًا\nمن خلال تتبع هذا البرنامج. يأخذ الكمبيوتر\nالسطر الأول من البرنامج ويقوم بتحميله في الذاكرة العاملة. أول ما سنفعله هو البحث عن أي تعبيرات لإيجاد قيمتها. تذكر أن تقييم التعبير يؤدي إلى تبسيطه إلى قيمة واحدة. لدينا هنا المقدار، وهو العدد الصحيح أربعة زائد العدد العشري، وهو 20.55. وهذا يساوي التعويم 24.55. الآن،\nتم تبسيط جميع تعبيراتنا، لذا سينظر الكمبيوتر\nخارج الأقواس ويسأل، \"حسنًا، ماذا\nتريد مني أن أفعل بهذه القيمة؟\"  تطلب طباعة التعليمات\nأن تأخذ القيمة الموجودة داخل الأقواس وتذهب\nلعرضها في وحدة التحكم. لذلك يذهب هنا ويطبع 24.55. اكتملت هذه التعليمات، لذا فإن الكمبيوتر جاهز\nللانتقال إلى الخطوة التالية، ولكنه يريد أولاً\nتحسين مساحة دماغه. لا يحتاج حقًا إلى\nتذكر هذه التعليمات بعد الآن، ولا يحتاج إلى هذه المعلومات. لذا فهو يقوم فقط بمسح\nذاكرته العاملة وينسى، وهذا يفسح المجال\nللتعليمات التالية. الآن، يقوم الكمبيوتر بتحميل السطر الثاني في ذاكرته العاملة. ومرة أخرى، تبحث عن أي\nتعبيرات لإيجاد قيمتها. فهو يرى المقدار ثلاثة زائد اثنين، ويبسط ذلك\nإلى العدد الصحيح خمسة. لاحظ أنه لا توجد\nتعليمات الطباعة هنا.  في الواقع، لم نطلب من الكمبيوتر أن يفعل أي شيء بهذه القيمة. لذلك يفكر الكمبيوتر، \"حسنًا، لقد قمت بكل هذا العمل. لقد اكتشفت الإجابة رقم خمسة، لكن أعتقد أنك لا تريد مني أن أخبرك. لذا فهو يتجاهل أي شيء،\nويمسح ذاكرته العاملة، نسي ذلك الرقم خمسة، وانتقل للتو. السطر الثالث، يقوم الكمبيوتر بالتحميل، وطباعة السلسلة\nبالإضافة إلى مسافة السلسلة. لكن هناك عاملين\nفي هذا التعبير. هناك علامتي زائد لذا سيقوم الكمبيوتر\nبتقييم هذا التعبير في خطوتين، القراءة من اليسار إلى اليمين. أولاً، يقوم بتقييم\nالتعبير، وتعلم الآن، عندما نضيف سلاسل. تذكر أننا نقوم بالتسلسل معًا، لذا نحصل على مساحة تعلم السلسلة. ثم نضيف السلسلة أكثر \nونحصل على مساحة تعلم أكبر \nبين قوسين، نرى أننا أردنا طباعة تلك القيمة، وتطبع مساحة تعلم\nأكبر في وحدة التحكم. وأخيرًا، يقوم بمسح ذاكرته العاملة وينتقل إلى السطر التالي. ما رأيك في\nالسطرين الأخيرين من هذا البرنامج؟ خذ ثانية وحاول\nتتبعها بنفسك. حسنًا، هذه التعليمات تحتوي على التعبير، السلسلة 81 بالإضافة إلى السلسلة 19.42. الآن، قد تبدو هذه كأعداد\nصحيحة وأعداد عائمة، ولكن نظرًا لوجود\nعلامات الاقتباس حولها، سيتعامل\nمعها الكمبيوتر مثل السلاسل. لذلك عندما نقوم بتقييم هذا التعبير، فإننا نقوم بتسلسل السلاسل ونحصل على السلسلة 8119.42. لم يبق شيء لتبسيطه هنا. لذلك يظهر الكمبيوتر\nخارج الأقواس، ويرى الطباعة، ثم\nيطبع 8119.42 على وحدة التحكم. ثم يقوم بمسح الذاكرة العاملة وينتقل إلى السطر الأخير.  يقوم الكمبيوتر بتحميل\nالسطر الأخير من البرنامج في الذاكرة العاملة. لاحظ أن كل ما هو موجود\nداخل الأقواس هنا محاط بعلامات الاقتباس. وهذا يعني أن هذه قيمة واحدة بالفعل. إنها السلسلة، حرفين، حرف مسافة، بالإضافة إلى\nحرف، حرف مسافة، حرفين. إنه ليس تعبير\nالعدد الصحيح اثنين زائد اثنين. نظرًا لأن لدينا بالفعل قيمة واحدة، فلا يوجد ما يمكن تبسيطه هنا. لذلك يقوم الكمبيوتر بإخراج الأقواس، ويرى طباعة التعليمات، ويطبع مسافتين بالإضافة إلى\nمسافة اثنين إلى وحدة التحكم، ويمسح الذاكرة العاملة. ثم ينتقل إلى\nالسطر التالي من البرنامج، ولا يوجد سطر تالي.  لقد وصلنا إلى النهاية، لقد فعلنا ذلك. لذا ينهي الكمبيوتر\nتنفيذ البرنامج، ويخرج، ولدينا\nنتيجة نهائية هنا في وحدة التحكم.  هل تريد التحقق من عملي؟ انسخ هذا البرنامج إلى محرر الأكواد وقم بتشغيله بنفسك. هل النتيجة هي نفسها؟",
    "t_italian": "- Tracciamo un programma passo dopo passo. Questo è uno schema comune che utilizzeremo per capire cosa sta facendo il computer\nsotto il cofano quando premiamo il pulsante Esegui. Tracciare l'esecuzione del programma in questo modo ci aiuta a leggere e scrivere meglio i programmi perché possiamo iniziare a prevedere cosa farà il computer\ncon ciascuna istruzione senza dover passare attraverso un lungo processo di tentativi ed errori. Per ora, scriveremo tutto insieme in modo da poter dare un senso a\nciò che sta accadendo qui, ma alla fine acquisiremo\nabbastanza familiarità con Python da poter tracciare piccoli\nblocchi di codice come questo nella nostra testa. Quando premi Esegui, il computer esamina il\ntuo programma riga per riga. Non è abbastanza intelligente da rimpicciolire e guardare il quadro generale\ne cercare di capire cosa sta\ncercando di fare il programma nel suo insieme. Quando dico riga per riga, intendo letteralmente che il computer\ncaricherà ciascuna riga del programma nella sua memoria di lavoro una per una. E poi con un'istruzione caricata nella sua memoria di lavoro, interpreterà quell'istruzione\nin isolamento, in totale isolamento. Ora, ricorda che il\ncomputer non legge nel pensiero. Quindi non comprende alcuna sfumatura o intenzione dietro le tue istruzioni. Farà letteralmente\nciò che dice l'istruzione secondo le regole di Python. Vediamolo in azione\ntracciando questo programma. Il computer prende la\nprima riga del programma e la carica nella memoria di lavoro. Quindi la prima cosa che farà sarà cercare eventuali espressioni da valutare. Ricorda che la valutazione di un'espressione la semplifica semplicemente riducendola a un singolo valore. Qui abbiamo l'espressione, il numero intero quattro più il float, 20,55. E questo vale il float 24.55. Ora, tutte le nostre espressioni\nsono state semplificate, quindi il computer\nsbircerà fuori dalle parentesi e chiederà: \"Bene, cosa\nvolevi che facessi con questo valore?\" L'istruzione print\ngli dice di prendere il valore tra parentesi e di\nvisualizzarlo nella console. Quindi va qui e stampa 24:55. Questa istruzione è completa, quindi il computer è pronto\nper passare al passaggio successivo, ma prima vuole\nottimizzare il suo spazio cerebrale. Non ha più bisogno di\nricordare queste istruzioni, non ha bisogno di queste informazioni. Quindi cancella semplicemente la sua\nmemoria di lavoro e dimentica, lasciando spazio\nall'istruzione successiva. Ora il computer carica la seconda riga nella sua memoria di lavoro. E ancora, cerca eventuali\nespressioni da valutare. Vede l'espressione tre più due e la semplifica\nfino all'intero cinque. Si noti che non ci sono\nistruzioni per la stampa qui.  In realtà non abbiamo chiesto al computer di fare nulla con quel valore. Quindi il computer pensa: \"Beh, ehi, ho appena fatto tutto questo lavoro. Ho pensato che la risposta fosse cinque, ma immagino che tu non voglia che te lo dica. Quindi alza le spalle a qualunque cosa, e\ncancella la sua memoria di lavoro, dimentica il cinque e va avanti. Terza riga, il computer carica, stampa la stringa learn\npiù lo spazio della stringa. Attenzione, questa non è la stringa vuota. C'è un piccolo spazio tra queste virgolette più la stringa in più. Ma ci sono due operatori\nin questa espressione. Ci sono due segni più. Quindi il computer\nvaluterà questa espressione in due passaggi, leggendo da sinistra a destra. Innanzitutto valuta l'\nespressione, impara più spazio. ricorda che stiamo concatenando. Stiamo mescolando insieme. Quindi otteniamo lo spazio di apprendimento della stringa. Quindi aggiungiamo altro \nspazio di apprendimento. Concateniamo e otteniamo un valore singolo, quindi il computer raggiunge il picco\nparentesi, vede che volevamo stampare quel valore e stampa\npiù spazio nella console. Infine cancella la memoria di lavoro e passa alla riga successiva. Cosa pensi che facciano le ultime\ndue righe di questo programma? Prenditi un secondo e prova a\nrintracciarlo tu stesso. Ok, questa istruzione contiene l'espressione, la stringa 81 più la stringa 19.42. Ora, questi potrebbero sembrare\nnumeri interi e in virgola mobile, ma poiché sono racchiusi\ntra virgolette, il computer\nli tratterà come stringhe. Pertanto, quando valutiamo questa espressione, concateniamo le stringhe e otteniamo la stringa 8119.42. Non c'è più nulla da semplificare qui. Quindi il computer esce\ndalle parentesi, vede la stampa e quindi\nstampa 8119.42 sulla console. Quindi cancella la memoria di lavoro e passa all'ultima riga. Il computer carica l'\nultima riga del programma nella memoria di lavoro. Nota che tutto questo\ntra parentesi qui è racchiuso tra virgolette. Ciò significa che questo è già un valore singolo. È la stringa, i due caratteri, il carattere spazio, più il\ncarattere, il carattere spazio, due caratteri. Non è l'espressione\nil numero intero due più due. Poiché abbiamo già un singolo valore, non c'è nulla da semplificare qui. Quindi il computer fa uscire le parentesi, vede l'istruzione stampata, stampa due spazi più\nlo spazio due sulla console e cancella la memoria di lavoro. Quindi passa alla\nriga successiva del programma e, oh, non esiste alcuna riga successiva. Siamo alla fine, ce l'abbiamo fatta. Quindi il computer termina\nl'esecuzione del programma, esce e abbiamo un\nrisultato finale qui nella console. Vuoi controllare il mio lavoro? Copia questo programma in un editor di codice ed eseguilo tu stesso. Il risultato è lo stesso?"
}