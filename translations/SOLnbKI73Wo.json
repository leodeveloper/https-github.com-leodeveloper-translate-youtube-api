{
    "source": "SOLnbKI73Wo",
    "youtubelink": "https://www.youtube.com/watch?v=SOLnbKI73Wo",
    "t_english": "- [Lecturer] What are some of the ways you interact with digital technology every day? You might press a button, enter something into a text box, or swipe up or down. You might even move a joystick on a controller, tap a credit card, or turn a knob on a car. These are all ways that a program can ask for input from a user. The program waits for the user's response and then reacts to it. In Python, we can ask the user for input with the input function. When I run this program, I see a blinking cursor appear in the console. If I type something in here and hit enter, the program terminates. But what happened to that value that I entered? It's there, the computer received it, but just like any value, we can't see it unless we tell the computer to print it. When we use the input function, we wanna think about our user interface. The person using our program may be someone else who doesn't know anything about our code, just how we don't know how the programming behind most of the technology we use every day works, we just know how to use it. So we need to make sure we're giving the user enough information so they know what to enter when they see the prompt. Luckily for us, the input function takes a single input value. Whatever string we put inside these parentheses will show up in the console on the same line right before that blinking cursor. We wanna make this prompt message descriptive so the user knows what we're asking for. Maybe they need to choose between a few values or enter a date. Here, let's imagine we're building a weather app and we want the user to enter a city so we can load the weather for it. I'll add a descriptive prompt here to make sure the user knows we're looking for a city name. By convention, we usually add a single space character at the end of any prompt message, so we get a space in the console between the message and the cursor. At the top of the app, I wanna display weather for city name, so I'm just going to concatenate that to the front of the input call because we know the input function returns out whatever string the user entered at the prompt. What if I also want a section on the page to display city name 10 day forecast? If I add another input function call, now two prompts show up in the console, so the user has to enter the city name twice and there's no guarantee that they enter the same city name both times. Instead. Sounds like we wanna store that first city name that the user entered so we can use it later. This calls for a variable. In most cases, this is the first thing you wanna do with the output of an input function, because we wanna save that information that the user gave us. Then I can just access that variable anywhere. I wanna use the user's input. You may be thinking, \"Hold up. You are talking about tapping a credit card or swiping on my phone, not typing something into this janky prompt in the console.\" It's not because we're building fake programs, it's because we're working on the backend of an application. Most digital technology has a frontend and a backend. The backend is what the application does. It's the main logic and the data processing. The frontend is what the application looks and feels like. It's the visual or tactile elements that the user interacts with. The frontend and the backend then communicate. The frontend tells the backend what actions the user took, the backend processes that information, and then tells the frontend what data to display. Then the frontend takes that data and decides how to display it to the user. Both parts are equally important. If I have a game where the controls are super confusing and show up in unexpected places on the screen, then no one's gonna play my game, even if it's the coolest game ever. On the other hand, if I have a beautifully designed website with an easy to navigate layout, but the search results are garbage and everything's slow to load, no one's gonna use my application either. Some programmers work on both back backend and frontend, but many programming teams are divided into backend developers and frontend developers because they're both such critical but different skill sets. Python is primarily a backend programming language. So when you use the input function, imagine there's a frontend that goes with it. If you wanna handle touch gestures on a phone, maybe your input prompt asks the user if they wanna swipe right, left up or down, or if it's a text box, then maybe the prompt is just the label for it, like search or subject. You can imagine your print output the same way. The backend's just returning the plain data, but the frontend would lay it out nicely on the screen. So if you ever start feeling like, \"Hey, this console input output thing feels kind of blah\", remember that most programs don't look fancy either. It's thanks to front-end developers that applications look cool and are easy to use, and it's thanks to backend developers that they do complex and interesting things. Let's focus on mastering one thing at a time, though. For us, that means making our programs do cool things and we'll worry about how they look later. \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n",
    "t_urdu": "- [لیکچرر] آپ روزانہ ڈیجیٹل ٹکنالوجی کے ساتھ تعامل کرنے کے کچھ طریقے کیا ہیں\n؟ آپ بٹن دبا سکتے ہیں، ٹیکسٹ باکس میں کچھ درج کر سکتے ہیں،\nیا اوپر یا نیچے سوائپ کر سکتے ہیں۔ آپ\nکنٹرولر پر جوائس اسٹک بھی لے سکتے ہیں، کریڈٹ کارڈ کو تھپتھپا سکتے ہیں، یا\nکار پر دستک پھیر سکتے ہیں۔ یہ وہ تمام طریقے ہیں جن سے کوئی پروگرام صارف سے ان پٹ مانگ سکتا ہے۔ پروگرام صارف کے جواب کا انتظار کرتا ہے اور پھر اس پر ردعمل ظاہر کرتا ہے۔ Python میں، ہم صارف سے ان پٹ فنکشن کے ساتھ ان پٹ مانگ سکتے ہیں۔ جب میں اس پروگرام کو چلاتا ہوں، تو مجھے کنسول میں ایک پلک جھپکتا ہوا کرسر نظر\nآتا ہے۔ اگر میں یہاں کچھ ٹائپ کرتا ہوں اور انٹر کو دباتا ہوں تو پروگرام ختم ہوجاتا ہے۔ لیکن اس قدر کا کیا ہوا\nجو میں داخل ہوا؟ یہ وہیں ہے، کمپیوٹر نے اسے موصول کیا، لیکن کسی قدر کی طرح، ہم اسے اس وقت تک نہیں دیکھ سکتے جب تک کہ ہم کمپیوٹر کو پرنٹ کرنے کو نہ کہیں۔ جب ہم ان پٹ فنکشن استعمال کرتے ہیں تو ہم اپنے صارف انٹرفیس کے بارے میں سوچنا چاہتے ہیں۔ ہمارا پروگرام استعمال کرنے والا کوئی\nاور شخص ہو سکتا ہے جو ہمارے کوڈ کے بارے میں کچھ نہیں جانتا، بس ہم یہ نہیں جانتے کہ ہم روزانہ استعمال کی جانے والی زیادہ تر ٹیکنالوجی کے پیچھے پروگرامنگ کیسے\nکام کرتی ہے، ہم صرف یہ جانتے ہیں کہ اسے کیسے استعمال کرنا ہے۔ لہذا ہمیں یہ یقینی بنانا ہوگا کہ ہم صارف کو کافی معلومات دے رہے ہیں تاکہ وہ جان لیں کہ\nجب وہ پرامپٹ دیکھیں تو کیا درج کرنا ہے۔ خوش قسمتی سے ہمارے لیے، ان پٹ فنکشن ایک ہی ان پٹ ویلیو لیتا ہے۔ ہم ان قوسین کے اندر جو بھی سٹرنگ ڈالیں گے وہ\n \nکنسول میں اسی لائن پر اس پلک جھپکتے کرسر سے پہلے نظر آئے گی۔ ہم اس فوری پیغام کو وضاحتی بنانا چاہتے ہیں\n تاکہ صارف کو معلوم ہو کہ ہم کیا مانگ رہے ہیں۔ ہوسکتا ہے کہ انہیں\nچند اقدار کے درمیان انتخاب کرنے کی ضرورت ہو یا تاریخ درج کریں۔ یہاں، آئیے تصور کریں کہ ہم\nموسم کی ایپ بنا رہے ہیں اور ہم چاہتے ہیں کہ صارف شہر میں داخل ہو تاکہ ہم اس کے لیے موسم لوڈ کر سکیں۔ میں یہاں ایک وضاحتی اشارہ شامل کروں گا تاکہ یہ یقینی بنایا جا سکے کہ صارف جانتا ہے کہ\nہم شہر کا نام تلاش کر رہے ہیں۔ کنونشن کے مطابق، ہم عام طور پر\n کسی بھی پرامپٹ میسج کے آخر میں ایک اسپیس کریکٹر کا اضافہ کرتے ہیں، اس لیے ہمیں میسج اور کرسر کے درمیان کنسول میں ایک جگہ ملتی ہے۔\n ایپ کے اوپری حصے میں، میں شہر کے نام کے لیے موسم ظاہر کرنا چاہتا ہوں، اس لیے میں اسے صرف ان پٹ کال کے سامنے جوڑنے جا رہا ہوں کیونکہ ہم جانتے ہیں کہ ان پٹ\nفنکشن صارف کے پرامپٹ پر جو بھی سٹرنگ\nداخل کرتا ہے اسے واپس کرتا ہے۔ کیا ہوگا اگر میں صفحہ پر ایک سیکشن شہر کے نام کی 10 دن کی پیشن گوئی ظاہر کرنا چاہتا ہوں؟ اگر میں ایک اور ان پٹ فنکشن کال شامل کرتا ہوں، تو اب کنسول میں دو پرامپٹ ظاہر ہوں گے، لہذا صارف کو\nشہر کا نام دو بار درج کرنا ہوگا اور اس بات کی کوئی گارنٹی نہیں ہے کہ وہ\nدونوں بار ایک ہی شہر کا نام درج کریں۔  اس کے بجائے۔  ایسا لگتا ہے کہ ہم اس\nشہر کا پہلا نام محفوظ کرنا چاہتے ہیں جو صارف نے درج کیا ہے\nتاکہ ہم اسے بعد میں استعمال کر سکیں۔ یہ ایک متغیر کا مطالبہ کرتا ہے۔ زیادہ تر معاملات میں، یہ\nپہلا کام ہے جو آپ کسی ان پٹ فنکشن کے آؤٹ پٹ کے ساتھ کرنا چاہتے ہیں، کیونکہ ہم اس معلومات کو محفوظ کرنا چاہتے ہیں جو صارف نے ہمیں دی تھی۔ پھر میں صرف\nاس متغیر تک کہیں بھی رسائی حاصل کر سکتا ہوں۔ میں صارف کا ان پٹ استعمال کرنا چاہتا ہوں۔ آپ سوچ رہے ہوں گے، \"رکو۔ آپ\nکریڈٹ کارڈ کو ٹیپ کرنے یا میرے فون پر سوائپ کرنے کی بات کر رہے ہیں، کنسول میں اس جانکی پرامپٹ میں کچھ ٹائپ نہیں کر رہے ہیں۔\n\" یہ اس لیے نہیں کہ ہم\nجعلی پروگرام بنا رہے ہیں، یہ اس لیے ہے کہ ہم کسی ایپلیکیشن کے بیک اینڈ پر کام کر رہے ہیں۔ زیادہ تر ڈیجیٹل ٹیکنالوجی کا\nفرنٹ اینڈ اور بیک اینڈ ہوتا ہے۔ پسدید وہی ہے جو ایپلی کیشن کرتا ہے۔ یہ بنیادی منطق اور\nڈیٹا پروسیسنگ ہے۔ فرنٹ اینڈ وہی ہے جو\nایپلی کیشن نظر آتا ہے اور جیسا محسوس ہوتا ہے۔ یہ وہ بصری یا سپرش عناصر ہیں جن کے ساتھ صارف تعامل کرتا ہے۔ فرنٹ اینڈ اور\nبیک اینڈ پھر بات چیت کرتے ہیں۔ فرنٹ اینڈ بیک اینڈ کو بتاتا ہے کہ صارف نے کیا اقدامات کیے، بیک اینڈ اس معلومات پر کارروائی کرتا ہے، اور پھر فرنٹ اینڈ کو بتاتا ہے کہ\nکون سا ڈیٹا ڈسپلے کرنا ہے۔ پھر فرنٹ اینڈ اس ڈیٹا کو لیتا ہے اور فیصلہ کرتا ہے کہ اسے صارف کو کیسے دکھایا جائے۔ دونوں حصے یکساں اہم ہیں۔ اگر میرے پاس کوئی گیم ہے جس میں\nکنٹرولز انتہائی الجھن میں ہیں اور اسکرین پر غیر متوقع جگہوں پر دکھائی دیتے ہیں،\n تو کوئی بھی میرا گیم نہیں کھیلے گا، چاہے یہ اب تک کا بہترین گیم ہی کیوں نہ ہو۔ دوسری طرف، اگر میرے پاس ایک خوبصورت ڈیزائن کردہ ویب سائٹ ہے جس میں آسانی سے لے آؤٹ ہے، لیکن تلاش کے نتائج ردی کی ٹوکری میں ہیں اور ہر چیز لوڈ ہونے میں سست ہے، تو کوئی بھی میری ایپلیکیشن کو استعمال نہیں کرے گا۔ کچھ پروگرامرز\nبیک اینڈ اور فرنٹ اینڈ دونوں پر کام کرتے ہیں، لیکن بہت سی پروگرامنگ ٹیمیں بیک اینڈ ڈویلپرز\nاور فرنٹ اینڈ ڈویلپرز میں تقسیم ہیں کیونکہ وہ دونوں ایسے ہی\nاہم لیکن مختلف مہارت کے سیٹ ہیں۔ Python بنیادی طور پر\nبیک اینڈ پروگرامنگ لینگویج ہے۔ لہذا جب آپ ان پٹ فنکشن کا استعمال کرتے ہیں تو تصور کریں کہ ایک فرنٹ اینڈ ہے\nجو اس کے ساتھ جاتا ہے۔ اگر آپ فون پر ٹچ اشاروں کو ہینڈل کرنا چاہتے ہیں، تو\n ہو سکتا ہے کہ آپ کا ان پٹ پرامپٹ صارف سے پوچھے کہ کیا وہ\nدائیں، بائیں اوپر یا نیچے سوائپ کرنا چاہتے ہیں، یا اگر یہ ٹیکسٹ باکس ہے، تو ہو سکتا ہے کہ پرامپٹ\nاس کے لیے صرف لیبل ہو، جیسے تلاش یا مضمون۔  . آپ اپنے\nپرنٹ آؤٹ پٹ کا اسی طرح تصور کر سکتے ہیں۔ پسدید صرف\nسادہ ڈیٹا واپس کر رہا ہے، لیکن فرنٹ اینڈ\nاسے اچھی طرح سے اسکرین پر ڈال دے گا۔ لہذا اگر آپ کبھی بھی ایسا محسوس کرنے لگتے ہیں، \"ارے، یہ کنسول ان پٹ آؤٹ پٹ چیز ایک قسم کی بدمزاجی محسوس کرتی ہے\"، یاد رکھیں کہ زیادہ تر پروگرام\nبھی اچھے نہیں لگتے۔ یہ فرنٹ اینڈ ڈویلپرز کی بدولت ہے کہ ایپلی کیشنز\nاچھی لگتی ہیں اور استعمال میں آسان ہیں، اور یہ بیک اینڈ ڈویلپرز کی بدولت ہے کہ وہ پیچیدہ\nاور دلچسپ چیزیں کرتے ہیں۔ آئیے ایک وقت میں ایک چیز پر عبور حاصل کرنے پر توجہ مرکوز کرتے ہیں۔\n ہمارے لیے، اس کا مطلب ہے کہ\nہمارے پروگراموں کو زبردست چیزیں بنائیں اور ہم فکر کریں گے کہ وہ بعد میں کیسے نظر آتے ہیں۔",
    "t_spanish": "- [Profesor] ​​¿Cuáles son algunas de las formas en que interactúa con la\ntecnología digital todos los días? Puede presionar un botón, ingresar algo en un\ncuadro de texto o deslizar el dedo hacia arriba o hacia abajo. Incluso podrías mover el\njoystick de un controlador, tocar una tarjeta de crédito o\ngirar la perilla de un automóvil. Todas estas son formas en que un programa puede solicitar información a un usuario. El programa espera la respuesta del usuario y luego reacciona. En Python, podemos pedirle entrada al usuario con la función de entrada. Cuando ejecuto este programa, veo aparecer un cursor parpadeante\nen la consola. Si escribo algo aquí y presiono Enter, el programa finaliza.  ¿ Pero qué pasó con ese\nvalor que ingresé? Está ahí, la computadora lo recibió, pero como cualquier valor, no podemos verlo a menos que le indiquemos a la computadora que lo imprima. Cuando usamos la función de entrada, queremos pensar en nuestra interfaz de usuario. La persona que usa nuestro\nprograma puede ser otra persona que no sabe nada sobre nuestro código, simplemente no sabemos cómo funciona la programación detrás de la mayor parte de la tecnología que\nusamos todos los días, solo sabemos cómo usarla.  Por lo tanto, debemos asegurarnos de brindarle al usuario suficiente información para que sepa qué ingresar\ncuando vea el mensaje. Por suerte para nosotros, la función de entrada toma un único valor de entrada. Cualquier cadena que pongamos\ndentro de estos paréntesis aparecerá en la\nconsola en la misma línea justo antes del cursor parpadeante. Queremos que este\nmensaje sea descriptivo para que el usuario sepa lo que estamos pidiendo. Tal vez necesiten elegir\nentre algunos valores o ingresar una fecha. Aquí, imaginemos que estamos\ncreando una aplicación meteorológica y queremos que el usuario ingrese una ciudad para que podamos cargar el clima. Agregaré un mensaje descriptivo aquí para asegurarme de que el usuario sepa que\nestamos buscando el nombre de una ciudad. Por convención, generalmente\nagregamos un solo carácter de espacio al final de cualquier mensaje emergente, de modo que obtengamos un espacio en la\nconsola entre el mensaje y el cursor. En la parte superior de la aplicación, quiero mostrar el clima para el nombre de la ciudad, así que simplemente voy a concatenarlo al frente de la llamada de entrada porque sabemos que la\nfunción de entrada devuelve cualquier cadena que el usuario\ningresó en el mensaje.  ¿ Qué sucede si también quiero que una sección en la página muestre el pronóstico de 10 días del nombre de la ciudad? Si agrego otra llamada de función de entrada, ahora aparecen dos mensajes en la consola, por lo que el usuario debe ingresar\nel nombre de la ciudad dos veces y no hay garantía de que ingrese el mismo\nnombre de ciudad ambas veces.  En cambio.  Parece que queremos\nalmacenar el nombre de la primera ciudad que ingresó el usuario\npara poder usarlo más tarde. Esto requiere una variable. En la mayoría de los casos, esto es lo\nprimero que queremos hacer con la salida de una función de entrada, porque queremos guardar la información que nos dio el usuario. Entonces puedo acceder a\nesa variable en cualquier lugar. Quiero usar la entrada del usuario. Quizás estés pensando: \"Espera. Estás hablando de\ntocar una tarjeta de crédito o deslizar el dedo por mi teléfono, no de escribir algo en este\nmensaje de la consola\". No es porque estemos\ncreando programas falsos, sino porque estamos trabajando en el backend de una aplicación. La mayor parte de la tecnología digital tiene\nun frontend y un backend. El backend es lo que hace la aplicación. Es la lógica principal y\nel procesamiento de datos. La interfaz es cómo\nse ve y se siente la aplicación. Son los elementos visuales o táctiles con los que interactúa el usuario.  Luego, el frontend y el\nbackend se comunican. El frontend le dice al backend qué acciones realizó el usuario, el backend procesa esa información y luego le dice al frontend\nqué datos mostrar. Luego, la interfaz toma esos datos y decide cómo mostrárselos al usuario. Ambas partes son igualmente importantes. Si tengo un juego donde los\ncontroles son muy confusos y aparecen en\nlugares inesperados de la pantalla, entonces nadie jugará mi juego, incluso si es el mejor juego de todos los tiempos. Por otro lado, si tengo un sitio web bellamente diseñado con un diseño fácil de navegar, pero los resultados de la búsqueda son basura y todo tarda en cargarse, nadie usará mi aplicación tampoco. Algunos programadores trabajan tanto en\nbackend como en frontend, pero muchos equipos de programación se dividen en desarrolladores de backend\ny desarrolladores de frontend porque ambos tienen\nhabilidades críticas pero diferentes. Python es principalmente un\nlenguaje de programación backend. Entonces, cuando usas la función de entrada, imagina que hay una interfaz\nque la acompaña. Si desea manejar\ngestos táctiles en un teléfono, tal vez su mensaje de entrada le pregunte al usuario si desea deslizar el dedo\nhacia la derecha, hacia la izquierda hacia arriba o hacia abajo, o si es un cuadro de texto, entonces tal vez el mensaje sea\nsolo la etiqueta, como búsqueda o asunto.  . Puedes imaginar tu\nsalida impresa de la misma manera. El backend solo\ndevuelve los datos simples, pero el frontend los\npresentaría muy bien en la pantalla. Entonces, si alguna vez comienzas a sentirte como, \"Oye, esto de la entrada y salida de la consola parece un poco aburrido\", recuerda que la mayoría de los programas\ntampoco parecen sofisticados. Es gracias a los desarrolladores front-end que las aplicaciones se ven\ngeniales y son fáciles de usar, y es gracias a los desarrolladores backend que hacen\ncosas complejas e interesantes.  Sin embargo, centrémonos en dominar\nuna cosa a la vez. Para nosotros, eso significa hacer que\nnuestros programas hagan cosas interesantes y nos preocuparemos de cómo se verán más adelante.",
    "t_arabic": "- [محاضر] ما هي بعض الطرق التي تتفاعل بها مع\nالتكنولوجيا الرقمية كل يوم؟ يمكنك الضغط على زر، أو إدخال شيء ما في\nمربع نص، أو التمرير لأعلى أو لأسفل. يمكنك أيضًا تحريك\nعصا التحكم على وحدة التحكم، أو النقر على بطاقة الائتمان، أو\nتشغيل مقبض السيارة. هذه كلها طرق يمكن أن يطلب بها البرنامج إدخالاً من المستخدم. ينتظر البرنامج رد المستخدم ثم يتفاعل معه. في بايثون، يمكننا أن نطلب من المستخدم الإدخال باستخدام وظيفة الإدخال. عندما أقوم بتشغيل هذا البرنامج، أرى مؤشرًا وامضًا\nيظهر في وحدة التحكم. إذا كتبت شيئًا هنا ثم ضغطت على زر الإدخال، فسيتم إنهاء البرنامج. ولكن ماذا حدث لتلك\nالقيمة التي أدخلتها؟ إنها هناك، وقد استقبلها الكمبيوتر، ولكن مثل أي قيمة، لا يمكننا رؤيتها إلا إذا طلبنا من الكمبيوتر طباعتها. عندما نستخدم وظيفة الإدخال، نريد أن نفكر في واجهة المستخدم الخاصة بنا.  قد يكون الشخص الذي يستخدم\nبرنامجنا شخصًا آخر لا يعرف شيئًا عن الكود الخاص بنا، لأننا لا نعرف كيف تعمل البرمجة وراء معظم التكنولوجيا التي\nنستخدمها كل يوم، بل نعرف فقط كيفية استخدامها. لذلك نحن بحاجة إلى التأكد من أننا نقدم للمستخدم ما يكفي من المعلومات حتى يعرف ما يجب إدخاله\nعندما يرى المطالبة. لحسن الحظ بالنسبة لنا، تأخذ وظيفة الإدخال قيمة إدخال واحدة. مهما كانت السلسلة التي نضعها\nداخل هذه الأقواس، فسوف تظهر في\nوحدة التحكم على نفس السطر قبل المؤشر الوامض مباشرة. نريد أن نجعل هذه\nالرسالة السريعة وصفية حتى يعرف المستخدم ما نطلبه. ربما يحتاجون إلى الاختيار\nبين بعض القيم أو إدخال تاريخ. هنا، لنتخيل أننا\nنبني تطبيقًا للطقس ونريد من المستخدم أن يدخل إلى مدينة حتى نتمكن من تحميل الطقس له. سأضيف مطالبة وصفية هنا للتأكد من أن المستخدم يعرف أننا\nنبحث عن اسم المدينة. وفقًا للاتفاقية، نقوم عادةً\nبإضافة مسافة واحدة في نهاية أي رسالة مطالبة، لذلك نحصل على مسافة في\nوحدة التحكم بين الرسالة والمؤشر. في الجزء العلوي من التطبيق، أريد عرض الطقس لاسم المدينة، لذلك سأقوم فقط بتسلسل ذلك في مقدمة استدعاء الإدخال لأننا نعلم أن\nوظيفة الإدخال ترجع أي سلسلة\nأدخلها المستخدم في الموجه. ماذا لو كنت أريد أيضًا أن يعرض قسم في الصفحة توقعات اسم المدينة لمدة 10 أيام؟ إذا قمت بإضافة استدعاء دالة إدخال أخرى، فستظهر الآن مطالبتان في وحدة التحكم، لذلك يتعين على المستخدم إدخال\nاسم المدينة مرتين وليس هناك ما يضمن إدخال\nاسم المدينة نفسه في المرتين. بدلاً من.  يبدو أننا نريد\nتخزين اسم المدينة الأول الذي أدخله المستخدم\nحتى نتمكن من استخدامه لاحقًا. وهذا يستدعي متغيرا. في معظم الحالات، هذا هو\nأول شيء تريد القيام به مع مخرجات دالة الإدخال، لأننا نريد حفظ تلك المعلومات التي قدمها لنا المستخدم. ثم يمكنني الوصول إلى\nهذا المتغير في أي مكان. أريد استخدام مدخلات المستخدم. ربما تفكر، \"انتظر. أنت تتحدث عن\nالنقر على بطاقة الائتمان أو التمرير على هاتفي، وليس كتابة شيء ما في هذه\nالمطالبة غير المرغوب فيها في وحدة التحكم.\" ليس لأننا\nنبني برامج مزيفة، بل لأننا نعمل على الواجهة الخلفية لأحد التطبيقات. تحتوي معظم التقنيات الرقمية على\nواجهة أمامية وخلفية. الواجهة الخلفية هي ما يفعله التطبيق. إنه المنطق الرئيسي\nومعالجة البيانات. الواجهة الأمامية هي ما\nيبدو عليه التطبيق ويشعر به. إنها العناصر المرئية أو الملموسة التي يتفاعل معها المستخدم. \nثم تتواصل الواجهة الأمامية والخلفية. تخبر الواجهة الأمامية الواجهة الخلفية بالإجراءات التي اتخذها المستخدم، وتعالج الواجهة الخلفية تلك المعلومات، ثم تخبر الواجهة الأمامية بالبيانات التي سيتم\nعرضها. ثم تأخذ الواجهة الأمامية تلك البيانات وتقرر كيفية عرضها للمستخدم. كلا الجزأين لهما نفس القدر من الأهمية. إذا كانت لدي لعبة تكون\nعناصر التحكم فيها مربكة للغاية وتظهر في أماكن غير متوقعة\nعلى الشاشة، فلن يلعب أحد لعبتي، حتى لو كانت أروع لعبة على الإطلاق. من ناحية أخرى، إذا كان لدي موقع ويب مصمم بشكل جميل مع تصميم سهل التنقل فيه، ولكن نتائج البحث غير جيدة وكل شيء بطيء في التحميل، فلن يستخدم أحد تطبيقي أيضًا. يعمل بعض المبرمجين على كل من\nالواجهة الخلفية والواجهة الأمامية، لكن العديد من فرق البرمجة تنقسم إلى مطوري الواجهة الخلفية\nومطوري الواجهة الأمامية لأنهما يتمتعان بمجموعات\nمهارات مهمة ولكن مختلفة. بايثون هي في المقام الأول\nلغة برمجة الواجهة الخلفية. لذا، عند استخدام وظيفة الإدخال، تخيل أن هناك واجهة أمامية\nتتوافق معها. إذا كنت تريد التعامل مع\nإيماءات اللمس على الهاتف، فربما تطلب مطالبة الإدخال من المستخدم ما إذا كان يريد التمرير\nلليمين أو لليسار لأعلى أو لأسفل، أو إذا كان مربع نص، فربما تكون المطالبة\nمجرد تسمية له، مثل البحث أو الموضوع  . يمكنك تخيل\nمخرجات الطباعة الخاصة بك بنفس الطريقة. تقوم الواجهة الخلفية\nبإرجاع البيانات البسيطة فقط، لكن الواجهة الأمامية\nستعرضها بشكل جيد على الشاشة. لذلك، إذا بدأت تشعر بالقول، \"مرحبًا، يبدو أمر إدخال وإخراج وحدة التحكم هذا أمرًا سخيفًا نوعًا ما\"، تذكر أن معظم البرامج\nلا تبدو رائعة أيضًا. بفضل مطوري الواجهة الأمامية، تبدو التطبيقات\nرائعة وسهلة الاستخدام، وبفضل مطوري الواجهة الخلفية، يقومون بأشياء معقدة\nومثيرة للاهتمام. دعونا نركز على إتقان\nشيء واحد في كل مرة. بالنسبة لنا، هذا يعني أن نجعل\nبرامجنا تقوم بأشياء رائعة وسنهتم بمظهرها لاحقًا.",
    "t_italian": "- [Docente] Quali sono alcuni dei modi in cui interagisci\nogni giorno con la tecnologia digitale? Potresti premere un pulsante, inserire qualcosa in una\ncasella di testo o scorrere verso l'alto o verso il basso. Potresti persino spostare un\njoystick su un controller, toccare una carta di credito o\ngirare una manopola su un'auto. Questi sono tutti i modi in cui un programma può chiedere input a un utente. Il programma attende la risposta dell'utente e poi reagisce ad essa. In Python, possiamo chiedere input all'utente con la funzione input. Quando eseguo questo programma, vedo apparire un cursore lampeggiante\nnella console. Se scrivo qualcosa qui e premo invio, il programma termina. Ma cosa è successo a quel\nvalore che ho inserito? È lì, il computer lo ha ricevuto, ma proprio come qualsiasi valore, non possiamo vederlo a meno che non diciamo al computer di stamparlo. Quando utilizziamo la funzione di input, vogliamo pensare alla nostra interfaccia utente. La persona che usa il nostro\nprogramma potrebbe essere qualcun altro che non sa nulla del nostro codice, proprio come non sappiamo come funziona la programmazione dietro la maggior parte della tecnologia che\nusiamo ogni giorno, sappiamo solo come usarla. Dobbiamo quindi assicurarci di fornire all'utente informazioni sufficienti in modo che sappia cosa inserire\nquando visualizza il prompt. Fortunatamente per noi, la funzione di input accetta un singolo valore di input. Qualunque stringa inseriamo\ntra queste parentesi verrà visualizzata nella\nconsole sulla stessa riga subito prima del cursore lampeggiante. Vogliamo rendere questo\nmessaggio descrittivo in modo che l'utente sappia cosa stiamo chiedendo. Forse devono scegliere\ntra alcuni valori o inserire una data. Qui, immaginiamo di\ncreare un'app meteo e di volere che l'utente entri in una città in modo da poter caricare il meteo. Aggiungerò qui una richiesta descrittiva per assicurarmi che l'utente sappia che\nstiamo cercando il nome di una città. Per convenzione, solitamente\naggiungiamo un singolo carattere di spazio alla fine di ogni messaggio di prompt, in modo da ottenere uno spazio nella\nconsole tra il messaggio e il cursore. Nella parte superiore dell'app, voglio visualizzare il meteo per il nome della città, quindi lo concatenerò semplicemente all'inizio della chiamata di input perché sappiamo che la\nfunzione di input restituisce qualunque stringa\ninserita dall'utente al prompt. Cosa succede se desidero che una sezione della pagina visualizzi anche le previsioni a 10 giorni del nome della città? Se aggiungo un'altra chiamata alla funzione di input, ora nella console vengono visualizzati due prompt, quindi l'utente deve inserire\nil nome della città due volte e non c'è garanzia che inserisca lo stesso\nnome della città entrambe le volte. Invece.  Sembra che vorremmo\nmemorizzare il nome della prima città immessa dall'utente\nin modo da poterlo utilizzare in seguito. Ciò richiede una variabile. Nella maggior parte dei casi, questa è la\nprima cosa che vuoi fare con l'output di una funzione di input, perché vogliamo salvare le informazioni che ci ha fornito l'utente. Quindi posso semplicemente accedere a\nquella variabile ovunque. Voglio utilizzare l'input dell'utente. Potresti pensare: \"Aspetta. Stai parlando di\ntoccare una carta di credito o scorrere il dito sul mio telefono, non di digitare qualcosa in questo\nmessaggio stravagante nella console\". Non è perché stiamo\ncostruendo programmi falsi, è perché stiamo lavorando sul backend di un'applicazione.  La maggior parte della tecnologia digitale ha\nun frontend e un backend. Il backend è ciò che fa l'applicazione. È la logica principale e\nl'elaborazione dei dati. Il frontend è l'\naspetto e la sensazione dell'applicazione. Sono gli elementi visivi o tattili con cui l'utente interagisce. Il frontend e il\nbackend comunicano quindi. Il frontend comunica al backend quali azioni ha intrapreso l'utente, il backend elabora tali informazioni e quindi indica al frontend\nquali dati visualizzare. Quindi il frontend prende quei dati e decide come mostrarli all'utente. Entrambe le parti sono ugualmente importanti. Se ho un gioco in cui i\ncontrolli sono estremamente confusi e compaiono in\nposti inaspettati sullo schermo, allora nessuno giocherà al mio gioco, anche se è il gioco più bello di sempre. D'altra parte, se ho un sito Web ben progettato con un layout facile da navigare, ma i risultati della ricerca sono spazzatura e tutto è lento da caricare, nessuno utilizzerà neanche la mia applicazione. Alcuni programmatori lavorano sia sul\nbackend che sul frontend, ma molti team di programmazione sono divisi in sviluppatori backend\ne sviluppatori frontend perché entrambi hanno\ncompetenze critiche ma diverse. Python è principalmente un\nlinguaggio di programmazione backend. Quindi, quando usi la funzione di input, immagina che ci sia un frontend\nche la accompagna. Se vuoi gestire i\ngesti tattili su un telefono, forse il tuo prompt di input chiede all'utente se vuole scorrere\nverso destra, sinistra verso l'alto o verso il basso, o se si tratta di una casella di testo, allora forse il prompt è\nsolo l'etichetta, come ricerca o oggetto  . Puoi immaginare il tuo\noutput di stampa allo stesso modo. Il backend restituisce solo\ni dati semplici, ma il frontend\nli visualizzerebbe bene sullo schermo. Quindi, se mai inizi a pensare: \"Ehi, questa cosa dell'input e dell'output della console sembra un po' insignificante\", ricorda che anche la maggior parte dei programmi\nnon ha un aspetto sofisticato. È grazie agli sviluppatori front-end che le applicazioni sembrano\nbelle e facili da usare, ed è grazie agli sviluppatori backend se fanno\ncose complesse e interessanti. Concentriamoci però sul padroneggiare\nuna cosa alla volta. Per noi, questo significa fare in modo che i\nnostri programmi facciano cose interessanti e noi ci preoccuperemo di come appariranno in seguito."
}