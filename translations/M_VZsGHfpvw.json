{
    "source": "M_VZsGHfpvw",
    "youtubelink": "https://www.youtube.com/watch?v=M_VZsGHfpvw",
    "t_english": "- [Instructor] Let's design a program using Boolean expressions and if statements. The public transit system wants to build an app that determines a passenger's bus fare. The standard bus fare is 4.25. However, they offer discounts for certain age groups, kids under five, ride for free, and seniors, those who are 60 and over, get a dollar off their fare. We wanna break down the problem so we can focus on getting one piece working at a time. Let's start with the kid's case. First, we wanna come up with a Boolean expression that's going to be the condition for our if statement. This Boolean expression should ask the question, does this passenger qualify as a kid? For the purposes of the bus fare we said a kid must be under five. That means we need some data about the passenger in order to answer this question. We need to know their age. So we'll add an input function call that asks the user to enter their age. Then our Boolean expression would be age < 5. Let's test that expression real quick. Oof. Okay, we gotta TypeError. The error message says the less than operator is not supported between instances of string and integer. Hmm. Age less than five. I guess it's saying age is a string. Ah, okay. 'Cause I didn't cast the result of the input function to an integer. So age is storing the string three and not the integer three. Okay, let's test that again. That's evaluating two true, which is correct. Now let's try the case where they're over five and now let's try the case where they're exactly five. Awesome. Okay. Double checking my requirements. It's correct that passengers who are five should not qualify for the kids fair. So this is working as intended. We've got a working condition. Let's put it in an if statement and we make sure to end this with a colon. Now what do we wanna happen if the passenger is a kid? Well, we want their bus fare to be free. To do that, inside the if statement, we can set the variable bus_fare to zero. Inside means indented one tab over. Let's check our work there and test both cases. And while we're at it, I'm gonna inline this condition into the if statement. It's functionally equivalent, but it looks a bit cleaner, especially with the condition so short. Now let's do the same for the seniors case. The condition for a senior is 60 and over, so we'll want our Boolean expression to be age greater than 60. However, this is inclusive. So if you are 60, you are a senior, so this should actually be greater than or equal to 60. We put that in an if statement, and then if the person is a senior, we wanna take a dollar off their fare. So the instruction we want indented inside the if statement should subtract a dollar from the existing bus fare. Let's test that with both cases where the user is a senior and where the user isn't. And let's also check that our kids' case didn't break. Now, why did I write this assignment statement as bus fare minus one, instead of just setting it directly to 3.25? This way is a bit more future proof. If the transit authority later needs to raise the bus fare by 50 cents, I can just change this first assignment statement to 4.75 and the dollar off senior discount will still work. If I had instead set it to 3.25, I would have to remember to come back here and update this to 3.75 as well. On this requirement the transit authority wants the app to tell the passenger which fare they qualified for in addition to the price. One way to do that could be to just add a print function call inside each of these if statements. I don't love that user experience. I would rather the existing print statement, just print out the fare type. So it might say the senior bus fare is 3.25. That means we need to remember the fair type so it's still available by the time we get to this print statement at the end. Sounds like we need a new variable. Inside the senior if statement, we'll set the fair_type to the string senior and inside the kids' if statement, we'll set the fair_type to the string kids. Then we can concatenate the fair_type into our print statement. Okay, now let's go in and check all of the possible cases. We start with the senior case. Looks like that works. Then the kids' case, looks like that works. And we also wanna check the standard case where neither if condition evaluates to true. Whoops, that gives us a NameError. The variable fair_type is not defined. Hmm, which makes sense because the assignment statements to fair_type only exist indented inside the if statements. That means if both conditions evaluate to false, neither of these assign statements run. So we need to initialize the variable fair_type so it exists in the standard case. Nice. It works. I would get started on the transit authority's next feature request, deducting bus fairs from the user's balance. \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n",
    "t_urdu": "- [انسٹرکٹر] آئیے بولین ایکسپریشنز اور اگر بیانات کا استعمال کرتے ہوئے ایک پروگرام ڈیزائن کریں۔ پبلک ٹرانزٹ سسٹم\nایک ایسی ایپ بنانا چاہتا ہے جو مسافر کے بس کا کرایہ طے کرے۔ معیاری بس کا کرایہ 4.25 ہے۔ تاہم، وہ\nمخصوص عمر کے گروپوں، پانچ سے کم عمر کے بچوں، مفت سواری، اور بزرگ، جو 60 سال یا اس سے زیادہ ہیں، کے لیے رعایت کی پیشکش کرتے ہیں، ان کے کرائے پر ایک ڈالر حاصل کرتے ہیں۔ ہم مسئلہ کو ختم کرنا چاہتے ہیں تاکہ ہم\nایک وقت میں ایک ٹکڑا کام کرنے پر توجہ مرکوز کرسکیں۔ آئیے بچے کے معاملے سے شروع کرتے ہیں۔ سب سے پہلے، ہم\nایک بولین اظہار کے ساتھ آنا چاہتے ہیں جو\nہمارے if بیان کے لیے شرط ہو گا۔ اس بولین اظہار کو\nسوال پوچھنا چاہیے، کیا یہ مسافر بچپن میں اہل ہے؟ بس کرایہ کے مقاصد کے لیے ہم نے کہا کہ ایک بچہ پانچ سال سے کم کا ہونا چاہیے۔ اس کا مطلب ہے کہ اس سوال کا جواب دینے کے لیے ہمیں\nمسافر کے بارے میں کچھ ڈیٹا کی ضرورت ہے۔ ہمیں ان کی عمر جاننے کی ضرورت ہے۔ لہذا ہم ایک ان پٹ فنکشن کال شامل کریں گے جو صارف سے اپنی عمر درج کرنے کو کہے گی۔ پھر ہمارا بولین ایکسپریشن\nعمر <5 ہوگا۔ آئیے اس ایکسپریشن کو فوری جانچیں۔ افف  ٹھیک ہے، ہمیں TypeError کرنا پڑے گی۔ غلطی کا پیغام کہتا ہے کہ سٹرنگ اور انٹیجر کی مثالوں کے درمیان\nکم سے کم آپریٹر تعاون یافتہ نہیں ہے۔\n ہمم  پانچ سے کم عمر۔ میرا اندازہ ہے کہ یہ کہہ رہا ہے کہ عمر\nایک تار ہے۔  آہ، ٹھیک ہے۔ 'کیونکہ میں نے ان\nپٹ فنکشن کا نتیجہ انٹیجر پر نہیں ڈالا۔ تو عمر سٹرنگ تین کو محفوظ کر رہی ہے نہ کہ تین عدد کو۔ ٹھیک ہے، آئیے اس کی دوبارہ جانچ کرتے ہیں۔ یہ دو سچوں کا اندازہ کر رہا ہے،\nجو درست ہے۔ اب آئیے اس کیس کو آزماتے ہیں\nجہاں وہ پانچ سے زیادہ ہیں اور اب اس کیس کو آزماتے ہیں\nجہاں وہ بالکل پانچ ہیں۔ خوفناک۔  ٹھیک ہے۔\nمیری ضروریات کو دو بار چیک کریں۔ یہ درست ہے کہ پانچ سال کے مسافروں کو \nبچوں کے میلے کے لیے اہل نہیں ہونا چاہیے۔ تو یہ مقصد کے مطابق کام کر رہا ہے۔ ہمارے پاس کام کرنے کی شرط ہے۔ آئیے اسے ایک if بیان میں ڈالتے ہیں اور ہم اسے بڑی آنت کے ساتھ ختم کرنا یقینی بناتے ہیں۔ اب\nاگر مسافر بچہ ہے تو ہم کیا چاہتے ہیں؟ ٹھیک ہے، ہم چاہتے ہیں کہ ان کا بس کرایہ مفت ہو۔ ایسا کرنے کے لیے، if اسٹیٹمنٹ کے اندر، ہم متغیر bus_fare کو صفر پر سیٹ کر سکتے ہیں۔ اندر کا مطلب ہے ایک ٹیب کے اوپر حاشیہ۔ آئیے وہاں اپنا کام چیک کریں\nاور دونوں صورتوں کی جانچ کریں۔ اور جب ہم اس پر ہیں، میں اس شرط کو\nif بیان میں ان لائن کروں گا۔ یہ فعال طور پر مساوی ہے، لیکن یہ قدرے صاف نظر آتا ہے، خاص طور پر اس کی مختصر حالت کے ساتھ۔ اب\nسینئرز کیس کے لیے بھی ایسا ہی کرتے ہیں۔ بزرگ کے لیے شرط 60 اور اس سے زیادہ ہے، اس لیے ہم چاہیں گے کہ ہمارے بولین اظہار کی عمر 60 سال سے زیادہ ہو۔ تاہم، یہ سب شامل ہے۔ لہذا اگر آپ کی عمر 60 ہے، آپ ایک سینئر ہیں، تو یہ اصل میں\n60 سے زیادہ یا اس کے برابر ہونا چاہیے۔ ہم اسے if سٹیٹمنٹ میں ڈالتے ہیں، اور پھر اگر وہ شخص سینئر ہے، تو ہم ان کے کرایے سے ایک ڈالر لینا چاہتے ہیں۔ لہذا ہم جس ہدایات کو if اسٹیٹمنٹ کے اندر داخل کرنا چاہتے ہیں اسے موجودہ بس کرایہ سے\nایک ڈالر کو گھٹانا چاہئے۔ آئیے جانچتے ہیں کہ دونوں صورتوں میں جہاں صارف سینئر ہے\nاور جہاں صارف نہیں ہے۔ اور یہ بھی چیک کریں کہ\nہمارے بچوں کا کیس تو نہیں ٹوٹ گیا۔ اب، میں نے\nاس اسائنمنٹ سٹیٹمنٹ کو \nبراہ راست 3.25 پر سیٹ کرنے کے بجائے بس کرایہ مائنس ون کیوں لکھا؟ یہ طریقہ کچھ زیادہ مستقبل کا ثبوت ہے۔ اگر ٹرانزٹ اتھارٹی کو بعد میں\nبس کے کرایہ میں 50 سینٹ بڑھانے کی ضرورت پڑتی ہے، تو میں صرف اس پہلی اسائنمنٹ سٹیٹمنٹ کو 4.75 میں تبدیل کر سکتا ہوں اور سینئر ڈسکاؤنٹ پر ڈالر\nاب بھی کام کرے گا۔ اگر میں اس کے بجائے اسے 3.25 پر سیٹ کرتا، تو\nمجھے یہاں واپس آنا اور اسے\nبھی 3.75 پر اپ ڈیٹ کرنا یاد رکھنا ہوگا۔ اس ضرورت پر ٹرانزٹ اتھارٹی چاہتی ہے کہ ایپ مسافر کو بتائے کہ وہ قیمت کے علاوہ کون سے کرایہ کے لیے اہل ہیں۔  ایسا\n کرنے کا ایک طریقہ یہ ہوسکتا ہے کہ ان میں سے ہر ایک کے اندر صرف ایک پرنٹ فنکشن کال شامل کی جائے اگر بیانات۔ مجھے وہ صارف تجربہ پسند نہیں ہے۔ میں\nموجودہ پرنٹ اسٹیٹمنٹ کے بجائے صرف کرایہ کی قسم کو پرنٹ کروں گا۔ تو یہ کہہ سکتا ہے کہ\nسینئر بس کا کرایہ 3.25 ہے۔ اس کا مطلب ہے کہ ہمیں\nمنصفانہ قسم کو یاد رکھنے کی ضرورت ہے لہذا جب تک ہم اس\nپرنٹ اسٹیٹمنٹ کو آخر میں حاصل کریں گے تب تک یہ دستیاب ہے۔ ایسا لگتا ہے جیسے ہمیں ایک نئے متغیر کی ضرورت ہے۔ سینئر if اسٹیٹمنٹ کے اندر، ہم fair_type کو\nسٹرنگ سینئر پر سیٹ کریں گے اور بچوں کے if اسٹیٹمنٹ کے اندر، ہم fair_type کو\nسٹرنگ بچوں کے لیے سیٹ کریں گے۔ پھر ہم اپنے پرنٹ اسٹیٹمنٹ میں fair_type کو جوڑ سکتے ہیں۔ ٹھیک ہے، اب آئیے اندر جائیں اور\nتمام ممکنہ معاملات کو چیک کریں۔ ہم سینئر کیس سے شروع کرتے ہیں۔  ایسا لگتا ہے کہ یہ کام کرتا ہے۔ پھر بچوں کا معاملہ، ایسا\nلگتا ہے کہ یہ کام کرتا ہے۔ اور ہم معیاری کیس کو بھی چیک کرنا چاہتے ہیں جہاں نہ تو شرط\nدرست ہونے کا اندازہ ہوتا ہے۔ افوہ، یہ ہمیں NameError دیتا ہے۔ متغیر fair_type کی وضاحت نہیں کی گئی ہے۔ ہمم، جو سمجھ میں آتا ہے کیونکہ فیئر_ٹائپ کے اسائنمنٹ اسٹیٹمنٹس صرف\nif اسٹیٹمنٹس کے اندر موجود ہوتے ہیں۔ اس کا مطلب ہے کہ اگر دونوں\nشرائط غلط پر تشخیص کرتے ہیں، تو ان میں سے کوئی بھی تفویض بیان نہیں چلتا ہے۔ لہذا ہمیں متغیر fair_type کو شروع کرنے کی ضرورت ہے\n تاکہ یہ معیاری کیس میں موجود ہو۔ اچھا  یہ کام کرتا ہے۔ میں\nٹرانزٹ اتھارٹی کی اگلی خصوصیت کی درخواست پر شروع کروں گا، \nصارف کے بیلنس سے بس میلے کاٹ کر۔",
    "t_spanish": "- [Instructor] Diseñemos un programa usando expresiones booleanas y sentencias if. El sistema de transporte público\nquiere crear una aplicación que determine la tarifa del autobús de un pasajero. La tarifa estándar del autobús es 4,25. Sin embargo, ofrecen descuentos\npara ciertos grupos de edad, los niños menores de cinco años viajan gratis y las personas mayores, aquellos que tienen 60 años o más, obtienen un dólar de descuento en su tarifa. Queremos analizar el problema para poder concentrarnos en hacer que\nuna pieza funcione a la vez. Empecemos por el caso del niño. Primero, queremos crear\nuna expresión booleana que será la\ncondición para nuestra declaración if. Esta expresión booleana\ndebería plantear la pregunta: ¿ este pasajero califica como niño? A los efectos del precio del autobús dijimos que un niño debe tener menos de cinco años. Eso significa que necesitamos algunos\ndatos sobre el pasajero para poder responder a esta pregunta. Necesitamos saber su edad. Entonces agregaremos una llamada de función de entrada que le pide al usuario que ingrese su edad. Entonces nuestra expresión booleana\nsería edad < 5. Probemos esa expresión muy rápido. Uf.  Bien, tenemos que escribir TypeError. El mensaje de error dice que\nel operador menor que no se admite entre\ninstancias de cadena y número entero. Mmm.  Edad menor de cinco años. Supongo que está diciendo que la edad\nes un hilo.  Ah bien. Porque no convertí el\nresultado de la función de entrada en un número entero. Entonces, la edad almacena la cadena tres y no el número entero tres. Bien, probemos eso de nuevo. Eso es evaluar dos\nverdaderos, lo cual es correcto. Ahora probemos el caso\nen el que tienen más de cinco y ahora probemos el caso\nen el que tienen exactamente cinco. Impresionante.  Bueno.  Verificando dos veces\nmis requisitos. Es cierto que los pasajeros de cinco años no deberían\ncalificar para la feria infantil. Entonces esto está funcionando según lo previsto. Tenemos condiciones de trabajo. Pongámoslo en una declaración if y nos aseguramos de terminar con dos puntos. Ahora, ¿qué queremos que pase\nsi el pasajero es un niño? Bueno, queremos que el billete de autobús sea gratuito. Para hacer eso, dentro de la declaración if, podemos establecer la variable bus_fare en cero. Interior significa sangría una pestaña más. Revisemos nuestro trabajo\nallí y probemos ambos casos. Y mientras estamos en eso, incluiré esta condición\nen la declaración if. Es funcionalmente equivalente, pero se ve un poco más limpio, especialmente con una condición tan corta. Ahora hagamos lo mismo\ncon el caso de las personas mayores. La condición para una persona mayor es 60 años o más, por lo que queremos que nuestra expresión booleana tenga una edad mayor a 60 años. Sin embargo, esto es inclusivo. Entonces, si tienes 60 años, eres una persona mayor, por lo que en realidad debería ser\nmayor o igual a 60. Lo ponemos en una declaración if, y luego, si la persona es una persona mayor, queremos descontar un dólar de su tarifa. Entonces, la instrucción que queremos sangrar dentro de la declaración if\ndebería restar un dólar de la tarifa de autobús existente. Probemos eso con ambos casos en los que el usuario es una persona mayor\ny en los que no lo es. Y revisemos también que el\nestuche de nuestros hijos no se haya roto. Ahora bien, ¿por qué escribí\nesta declaración de asignación como tarifa de autobús menos uno, en lugar de simplemente\nconfigurarla directamente en 3,25?  De esta manera es un poco más preparado para el futuro. Si más tarde la autoridad de tránsito\nnecesita aumentar la tarifa del autobús en 50 centavos, puedo cambiar esta primera declaración de asignación a 4,75 y el dólar de descuento para personas mayores\nseguirá funcionando. Si, en cambio, lo hubiera configurado en\n3.25, tendría que acordarme de volver aquí y\nactualizarlo también a 3.75. Sobre este requisito, la autoridad de tránsito quiere que la aplicación le diga al pasajero para qué tarifa calificó\nademás del precio. Una forma de hacerlo podría ser simplemente agregar una llamada a la función de impresión dentro de cada una de estas declaraciones if. No me encanta esa experiencia de usuario. Preferiría\nimprimir el estado de cuenta existente, simplemente imprimir el tipo de tarifa. Entonces podría decir que la\ntarifa del autobús para personas mayores es 3,25. Eso significa que debemos\nrecordar el tipo justo para que todavía esté disponible cuando lleguemos a esta\ndeclaración impresa al final. Parece que necesitamos una nueva variable. Dentro de la declaración if senior, estableceremos fair_type\nen la cadena senior y dentro de la declaración if de los niños, estableceremos fair_type\nen la cadena kids. Luego podemos concatenar fair_type en nuestra declaración de impresión. Bien, ahora entremos y verifiquemos\ntodos los casos posibles. Empezamos con el caso de la tercera edad. Parece que eso funciona. Entonces el caso de los niños\nparece que funciona. Y también queremos comprobar el caso estándar en el que ninguna de las dos condiciones\nse evalúa como verdadera. Vaya, eso nos da un NameError. La variable fair_type no está definida. Hmm, lo cual tiene sentido porque las declaraciones de asignación a fair_type solo existen sangradas\ndentro de las declaraciones if. Eso significa que si ambas\ncondiciones se evalúan como falsas, ninguna de estas declaraciones de asignación se ejecuta. Entonces necesitamos inicializar\nla variable fair_type para que exista en el caso estándar. Lindo.  Funciona. Comenzaría con\nla próxima solicitud de función de la autoridad de tránsito, deduciendo las ferias de autobuses\ndel saldo del usuario.",
    "t_arabic": "- [المدرس] لنصمم برنامجًا باستخدام التعبيرات المنطقية وعبارات if.  يريد نظام النقل العام\nإنشاء تطبيق يحدد أجرة حافلة الراكب. أجرة الحافلة القياسية هي 4.25. ومع ذلك، فإنها تقدم خصومات\nلفئات عمرية معينة، والأطفال دون سن الخامسة، يركبون مجانًا، وكبار السن، الذين يبلغون من العمر 60 عامًا أو أكثر، يحصلون على دولار واحد من الأجرة. نريد تفصيل المشكلة حتى نتمكن من التركيز على حل\nقطعة واحدة في كل مرة. لنبدأ بقضية الطفل. أولاً، نريد التوصل\nإلى تعبير منطقي سيكون\nشرطًا لعبارة if الخاصة بنا.  يجب أن يطرح هذا التعبير المنطقي\nالسؤال، هل هذا الراكب مؤهل لأن يكون طفلاً؟ لأغراض أجرة الحافلة قلنا أن الطفل يجب أن يكون أقل من خمس سنوات. وهذا يعني أننا بحاجة إلى بعض\nالبيانات عن الراكب للإجابة على هذا السؤال. علينا أن نعرف أعمارهم. لذلك، سنضيف استدعاء وظيفة الإدخال الذي يطلب من المستخدم إدخال عمره. إذن سيكون التعبير المنطقي هو\nالعمر < 5. فلنختبر هذا التعبير بسرعة كبيرة. اوف.  حسنًا، يجب علينا كتابة خطأ. تقول رسالة الخطأ أن\nعامل التشغيل أقل من غير مدعوم بين\nمثيلات السلسلة والعدد الصحيح. همم.  العمر أقل من خمس سنوات. أعتقد أنه يقول العمر\nهو سلسلة.  آه حسنا. لأنني لم أقم بتحويل\nنتيجة دالة الإدخال إلى عدد صحيح. لذا فإن العمر يخزن السلسلة ثلاثة وليس العدد الصحيح ثلاثة. حسنًا، دعنا نختبر ذلك مرة أخرى. هذا تقييم اثنين\nصحيح، وهو الصحيح. الآن دعونا نجرب الحالة\nالتي يكونون فيها أكبر من خمسة أعوام والآن دعونا نجرب الحالة\nالتي يكونون فيها في الخامسة من العمر بالضبط. مذهل.  تمام.  مضاعفة\nالتحقق من متطلباتي. من الصحيح أن الركاب الذين يبلغون من العمر خمس سنوات لا ينبغي أن\nيتأهلوا لمعرض الأطفال. لذلك هذا يعمل على النحو المنشود. لدينا حالة صالحة للعمل. لنضعها في عبارة if ونتأكد من إنهاء ذلك بنقطتين. الآن ماذا نريد أن يحدث\nإذا كان الراكب طفلاً؟ حسنًا، نريد أن تكون أجرة الحافلة مجانية. للقيام بذلك، داخل عبارة if، يمكننا ضبط المتغير bus_fare على الصفر.  \" الداخل\" يعني وضع مسافة بادئة لعلامة تبويب واحدة. دعونا نتحقق من عملنا\nهناك ونختبر كلتا الحالتين. وأثناء قيامنا بذلك، سأقوم بتضمين هذا الشرط\nفي عبارة if. إنها مكافئة من الناحية الوظيفية، لكنها تبدو أكثر نظافة بعض الشيء، خاصة مع كون الحالة قصيرة جدًا. الآن دعونا نفعل الشيء نفسه\nبالنسبة لقضية كبار السن. الشرط لكبار السن هو 60 عامًا أو أكثر، لذلك نريد أن يكون التعبير المنطقي الخاص بنا أكبر من 60 عامًا. ومع ذلك، هذا شامل. لذا، إذا كان عمرك 60 عامًا، فأنت من كبار السن، لذا يجب أن يكون هذا في الواقع\nأكبر من أو يساوي 60. لقد وضعنا ذلك في عبارة if، وبعد ذلك إذا كان الشخص من كبار السن، نريد أن نخصم دولارًا واحدًا من الأجرة. لذا فإن التعليمات التي نريد وضعها داخل عبارة if\nيجب أن تطرح دولارًا واحدًا من أجرة الحافلة الحالية. دعونا نختبر ذلك في كلتا الحالتين حيث يكون المستخدم كبيرًا\nوحيث لا يكون المستخدم كذلك. ودعونا نتأكد أيضًا من أن\nحالة أطفالنا لم تنكسر. الآن، لماذا كتبت\nبيان المهمة هذا على أنه أجرة الحافلة ناقص واحد، بدلاً من\nضبطه مباشرة على 3.25؟ هذه الطريقة هي دليل أكثر قليلا في المستقبل. إذا احتاجت هيئة النقل لاحقًا\nإلى رفع أجرة الحافلة بمقدار 50 سنتًا، فيمكنني فقط تغيير بيان التخصيص الأول هذا إلى 4.75 \nوسيظل خصم الدولار الكبير ساريًا. إذا قمت بتعيينه بدلاً من ذلك على\n3.25، فسأتذكر العودة إلى هنا\nوتحديثه إلى 3.75 أيضًا.  بناءً على هذا المطلب، تريد هيئة النقل من التطبيق أن يخبر الراكب بالسعر المؤهل للحصول عليه\nبالإضافة إلى السعر. إحدى الطرق للقيام بذلك هي إضافة استدعاء دالة طباعة داخل كل عبارة من عبارات if هذه. أنا لا أحب تجربة المستخدم تلك. أفضل\nبيان الطباعة الحالي، فقط قم بطباعة نوع السعر. لذلك قد نقول أن\nأجرة الحافلة الكبيرة هي 3.25. وهذا يعني أننا بحاجة إلى\nتذكر النوع العادل بحيث يظل متاحًا بحلول الوقت الذي نصل فيه إلى\nبيان الطباعة هذا في النهاية. يبدو أننا بحاجة إلى متغير جديد. داخل عبارة if Senior، سنقوم بتعيين fair_type\nعلى السلسلة Senior وداخل عبارة if الخاصة بالأطفال، سنقوم بتعيين fair_type\nعلى سلسلة الأطفال. ثم يمكننا تسلسل fair_type في بيان الطباعة الخاص بنا. حسنًا، فلندخل الآن ونتحقق من\nجميع الحالات المحتملة. نبدأ بالقضية الكبرى. يبدو أن هذا يعمل. إذن قضية الأطفال\nتبدو ناجحة. ونريد أيضًا التحقق من الحالة القياسية التي لا يتم فيها تقييم حالة الشرط على أنها\nصحيحة. عفوًا، هذا يعطينا خطأ في الاسم. لم يتم تعريف المتغير fair_type. حسنًا، وهذا أمر منطقي لأن عبارات الإسناد إلى fair_type موجودة فقط مع مسافة بادئة\nداخل عبارات if. وهذا يعني أنه إذا تم\nتقييم كلا الشرطين على أنه خطأ، فلن يتم تشغيل أي من عبارات التعيين هذه. لذلك نحن بحاجة إلى تهيئة\nالمتغير fair_type بحيث يكون موجودًا في الحالة القياسية. لطيف - جيد.  إنها تعمل. سأبدأ في\n طلب الميزة التالية لهيئة النقل، مع خصم معارض الحافلات\nمن رصيد المستخدم.",
    "t_italian": "- [Istruttore] Progettiamo un programma utilizzando espressioni booleane e istruzioni if. Il sistema di trasporto pubblico\nvuole creare un'app che determini la tariffa dell'autobus di un passeggero. La tariffa standard dell'autobus è 4,25. Tuttavia, offrono sconti\nper determinati gruppi di età, i bambini sotto i cinque anni viaggiano gratis e gli anziani, quelli che hanno 60 anni e più, ricevono un dollaro di sconto sul prezzo del biglietto. Vogliamo risolvere il problema in modo da poterci concentrare sul far\nfunzionare un pezzo alla volta. Cominciamo dal caso del ragazzo. Innanzitutto, vogliamo trovare\nun'espressione booleana che costituirà la\ncondizione per la nostra istruzione if. Questa espressione booleana\ndovrebbe porre la domanda: questo passeggero si qualifica come bambino? Ai fini del biglietto dell'autobus abbiamo detto che un bambino deve avere meno di cinque anni. Ciò significa che abbiamo bisogno di alcuni\ndati sul passeggero per rispondere a questa domanda. Dobbiamo conoscere la loro età. Quindi aggiungeremo una chiamata alla funzione di input che chiede all'utente di inserire la propria età. Allora la nostra espressione booleana\nsarebbe età < 5. Testiamo velocemente questa espressione. Uffa.  Ok, dobbiamo TypeError. Il messaggio di errore indica che\nl'operatore minore di non è supportato tra le\nistanze di stringa e intero. Hmm.  Età inferiore a cinque anni. Immagino che stia dicendo che l'età\nè una stringa.  Ah ok. Perché non ho convertito il\nrisultato della funzione di input in un numero intero. Quindi l'età memorizza la stringa tre e non l'intero tre. Ok, proviamolo di nuovo. Questo significa valutare due come\nvere, il che è corretto. Ora proviamo il caso\nin cui hanno più di cinque anni e ora proviamo il caso\nin cui ne hanno esattamente cinque. Eccezionale.  Va bene.\nRicontrolla le mie esigenze. È giusto che i passeggeri di cinque anni non possano\nqualificarsi per la fiera dei bambini. Quindi funziona come previsto. Abbiamo una condizione lavorativa. Inseriamolo in un'istruzione if e assicuriamoci di terminarlo con i due punti. Ora cosa vogliamo che accada\nse il passeggero è un bambino? Bene, vogliamo che il loro biglietto dell'autobus sia gratuito. Per fare ciò, all'interno dell'istruzione if, possiamo impostare la variabile bus_fare a zero. Interno significa rientrato di una linguetta. Controlliamo il nostro lavoro\nlì e testiamo entrambi i casi. E già che ci siamo, incorporerò questa condizione\nnell'istruzione if. È funzionalmente equivalente, ma sembra un po' più pulito, soprattutto con la condizione così breve. Ora facciamo lo stesso\nper il caso degli anziani. La condizione per un anziano è 60 anni e oltre, quindi vorremo che la nostra espressione booleana abbia un'età superiore a 60 anni. Tuttavia, questo è inclusivo. Quindi se hai 60 anni, sei un senior, quindi dovrebbe essere\nmaggiore o uguale a 60. Lo inseriamo in un'istruzione if, e poi se la persona è senior, vogliamo togliere un dollaro dal suo biglietto. Quindi l'istruzione che vogliamo inserire all'interno dell'istruzione if\ndovrebbe sottrarre un dollaro dal biglietto dell'autobus esistente. Proviamolo con entrambi i casi in cui l'utente è un senior\ne in cui l'utente non lo è. E controlliamo anche che la\ncustodia dei nostri figli non si sia rotta. Ora, perché ho scritto\nquesta dichiarazione di incarico come tariffa dell'autobus meno uno, invece di\nimpostarla direttamente su 3,25?  In questo modo è un po’ più a prova di futuro. Se in seguito l'autorità di trasporto pubblico\ndovesse aumentare la tariffa dell'autobus di 50 centesimi, posso semplicemente modificare questa dichiarazione di primo incarico a 4,75 e lo sconto senior in dollari\ncontinuerà a funzionare. Se invece lo avessi impostato a\n3.25, dovrei ricordarmi di tornare qui e\naggiornare anche questo a 3.75. In base a questo requisito, l'autorità di trasporto pubblico desidera che l'app indichi al passeggero a quale tariffa ha diritto\noltre al prezzo. Un modo per farlo potrebbe essere semplicemente aggiungere una chiamata alla funzione print all'interno di ciascuna di queste istruzioni if. Non amo quell'esperienza utente. Preferirei l'estratto\nconto stampato esistente, basta stampare il tipo di tariffa. Quindi potrebbe dire che la\ntariffa dell'autobus per anziani è 3,25. Ciò significa che dobbiamo\nricordare il tipo giusto in modo che sia ancora disponibile quando arriviamo a questa\ndichiarazione stampata alla fine. Sembra che abbiamo bisogno di una nuova variabile. All'interno dell'istruzione if senior, imposteremo fair_type\nsulla stringa senior e all'interno dell'istruzione if kids, imposteremo fair_type\nsulla stringa kids. Quindi possiamo concatenare fair_type nella nostra istruzione print. Ok, ora entriamo e controlliamo\ntutti i casi possibili. Iniziamo dal caso senior. Sembra che funzioni. Allora il caso dei bambini\nsembra funzionare. E vogliamo anche verificare il caso standard in cui nessuna delle due condizioni if\nrisulta vera. Ops, questo ci dà un NameError. La variabile fair_type non è definita. Hmm, il che ha senso perché le istruzioni di assegnazione a fair_type esistono solo con rientro\nall'interno delle istruzioni if. Ciò significa che se entrambe\nle condizioni risultano false, nessuna di queste istruzioni di assegnazione verrà eseguita. Quindi dobbiamo inizializzare\nla variabile fair_type in modo che esista nel caso standard.  Carino .  Funziona. Vorrei iniziare con\nla prossima richiesta di funzionalità dell'autorità di trasporto pubblico, detraendo le fiere degli autobus\ndal saldo dell'utente."
}